{"version":3,"sources":["../../app/app.js","../../app/components/backhaul.js","../../app/components/imperaApi.js","../../app/components/timeServer.js","../../app/partials/directives/directives.js","../../app/partials/input/inputDialog.js","../../app/partials/projects/projectsController.js","../../app/partials/refresh/refreshController.js","../../app/partials/sideController.js","../../app/views/addProject/addProject.js","../../app/views/agents/agents.js","../../app/views/compileReport/compileReport.js","../../app/views/deployReport/deployReport.js","../../app/views/diffDetail/diffDetail.js","../../app/views/editEnv/editEnv.js","../../app/views/env/env.js","../../app/views/feedback/feedback.js","../../app/views/fileDetail/fileDetail.js","../../app/views/formsView/formsView.js","../../app/views/graph/graph.js","../../app/views/log/logs.js","../../app/views/parameters/parameters.js","../../app/views/portal/portal.js","../../app/views/project/project.js","../../app/views/projects/projects.js","../../app/views/report/report.js","../../app/views/resource/resource.js","../../app/views/resourceDetail/resourceDetail.js","../../app/views/restores/restore.js","../../app/views/snapshotDetail/snapshotDetail.js","../../app/views/snapshots/snapshots.js","../templates.js","../../app/views/addEnv/addEnv.js","../../app/views/resourcecentric/resourceCentric.js"],"names":["exports","createCollection","proto","objectOnly","Collection","a","this","constructor","_keys","_values","_itp","init","call","defineProperty","get","sharedSize","prototype","add","forEach","set","sharedDelete","key","has","splice","i","p","sharedGet","undefined","list","Object","TypeError","length","is","indexOf","setHas","value","mapHas","sharedSet","push","sharedAdd","sharedClear","sharedKeys","sharedIterator","sharedValues","mapEntries","setEntries","itp","array","array2","done","next","v","k","sharedForEach","callback","context","it","entries","r","b","WeakMap","delete","clear","Map","values","keys","Set","WeakSet","global","window","document","minErr","module","ErrorConstructor","Error","paramPrefix","SKIP_INDEXES","templateArgs","arguments","code","message","template","replace","match","index","slice","shiftedIndex","toDebugString","encodeURIComponent","isArrayLike","obj","isWindow","isArray","isString","jqLite","isNumber","Array","item","iterator","isFunction","hasOwnProperty","isPrimitive","isBlankObject","forEachSorted","sort","reverseParams","iteratorFn","nextUid","uid","setHashKey","h","$$hashKey","baseExtend","dst","objs","deep","ii","isObject","j","jj","src","isDate","Date","valueOf","isRegExp","RegExp","nodeName","cloneNode","isElement","clone","extend","merge","toInt","str","parseInt","inherit","parent","extra","create","noop","identity","$","valueFn","hasCustomToString","toString","isUndefined","isDefined","getPrototypeOf","isScope","$evalAsync","$watch","isFile","isFormData","isBlob","isBoolean","isPromiseLike","then","isTypedArray","TYPED_ARRAY_REGEXP","test","node","prop","attr","find","makeMap","items","split","nodeName_","element","lowercase","arrayRemove","copy","source","destination","copyRecurse","copyElement","stackSource","stackDest","ngMinErr","needsRecurse","getTime","lastIndex","type","shallowCopy","charAt","equals","o1","o2","keySet","t1","t2","createMap","concat","array1","sliceArgs","args","startIndex","bind","self","fn","curryArgs","apply","toJsonReplacer","val","toJson","pretty","JSON","stringify","json","parse","timezoneToOffset","timezone","fallback","ALL_COLONS","requestedTimezoneOffset","isNaN","addDateMinutes","date","minutes","setMinutes","getMinutes","convertTimezoneToLocal","reverse","dateTimezoneOffset","getTimezoneOffset","timezoneOffset","startingTag","empty","e","elemHtml","append","html","nodeType","NODE_TYPE_TEXT","tryDecodeURIComponent","decodeURIComponent","parseKeyValue","keyValue","splitPoint","substring","toKeyValue","parts","arrayValue","encodeUriQuery","join","encodeUriSegment","pctEncodeSpaces","getNgAttribute","ngAttr","ngAttrPrefixes","getAttribute","angularInit","bootstrap","appElement","config","prefix","name","hasAttribute","candidate","querySelector","strictDi","modules","defaultConfig","doBootstrap","injector","tag","unshift","$provide","debugInfoEnabled","$compileProvider","createInjector","invoke","scope","compile","$apply","data","NG_ENABLE_DEBUG_INFO","NG_DEFER_BOOTSTRAP","angular","resumeBootstrap","extraModules","resumeDeferredBootstrap","reloadWithDebugInfo","location","reload","getTestability","rootElement","snake_case","separator","SNAKE_CASE_REGEXP","letter","pos","toLowerCase","bindJQuery","originalCleanData","bindJQueryFired","jqName","jq","jQuery","on","JQLitePrototype","isolateScope","controller","inheritedData","cleanData","elems","events","skipDestroyOnNextJQueryCleanData","elem","_data","$destroy","triggerHandler","JQLite","assertArg","arg","reason","assertArgFn","acceptArrayAnnotation","assertNotHasOwnProperty","getter","path","bindFnToScope","lastInstance","len","getBlockNodes","nodes","blockNodes","endNode","nextSibling","setupModuleLoader","ensure","factory","$injectorMinErr","$$minErr","requires","configFn","invokeLater","provider","method","insertMethod","queue","invokeQueue","moduleInstance","invokeLaterAndSetModuleName","recipeName","factoryFunction","$$moduleName","configBlocks","runBlocks","_invokeQueue","_configBlocks","_runBlocks","service","constant","decorator","animation","filter","directive","run","block","serializeObject","seen","publishExternalAPI","fromJson","version","uppercase","callbacks","counter","$$csp","csp","angularModule","$$sanitizeUri","$$SanitizeUriProvider","$CompileProvider","htmlAnchorDirective","input","inputDirective","textarea","form","formDirective","script","scriptDirective","select","selectDirective","style","styleDirective","option","optionDirective","ngBind","ngBindDirective","ngBindHtml","ngBindHtmlDirective","ngBindTemplate","ngBindTemplateDirective","ngClass","ngClassDirective","ngClassEven","ngClassEvenDirective","ngClassOdd","ngClassOddDirective","ngCloak","ngCloakDirective","ngController","ngControllerDirective","ngForm","ngFormDirective","ngHide","ngHideDirective","ngIf","ngIfDirective","ngInclude","ngIncludeDirective","ngInit","ngInitDirective","ngNonBindable","ngNonBindableDirective","ngPluralize","ngPluralizeDirective","ngRepeat","ngRepeatDirective","ngShow","ngShowDirective","ngStyle","ngStyleDirective","ngSwitch","ngSwitchDirective","ngSwitchWhen","ngSwitchWhenDirective","ngSwitchDefault","ngSwitchDefaultDirective","ngOptions","ngOptionsDirective","ngTransclude","ngTranscludeDirective","ngModel","ngModelDirective","ngList","ngListDirective","ngChange","ngChangeDirective","pattern","patternDirective","ngPattern","required","requiredDirective","ngRequired","minlength","minlengthDirective","ngMinlength","maxlength","maxlengthDirective","ngMaxlength","ngValue","ngValueDirective","ngModelOptions","ngModelOptionsDirective","ngIncludeFillContentDirective","ngAttributeAliasDirectives","ngEventDirectives","$anchorScroll","$AnchorScrollProvider","$animate","$AnimateProvider","$animateCss","$CoreAnimateCssProvider","$$animateJs","$$CoreAnimateJsProvider","$$animateQueue","$$CoreAnimateQueueProvider","$$AnimateRunner","$$AnimateRunnerFactoryProvider","$$animateAsyncRun","$$AnimateAsyncRunFactoryProvider","$browser","$BrowserProvider","$cacheFactory","$CacheFactoryProvider","$controller","$ControllerProvider","$document","$DocumentProvider","$exceptionHandler","$ExceptionHandlerProvider","$filter","$FilterProvider","$$forceReflow","$$ForceReflowProvider","$interpolate","$InterpolateProvider","$interval","$IntervalProvider","$http","$HttpProvider","$httpParamSerializer","$HttpParamSerializerProvider","$httpParamSerializerJQLike","$HttpParamSerializerJQLikeProvider","$httpBackend","$HttpBackendProvider","$xhrFactory","$xhrFactoryProvider","$location","$LocationProvider","$log","$LogProvider","$parse","$ParseProvider","$rootScope","$RootScopeProvider","$q","$QProvider","$$q","$$QProvider","$sce","$SceProvider","$sceDelegate","$SceDelegateProvider","$sniffer","$SnifferProvider","$templateCache","$TemplateCacheProvider","$templateRequest","$TemplateRequestProvider","$$testability","$$TestabilityProvider","$timeout","$TimeoutProvider","$window","$WindowProvider","$$rAF","$$RAFProvider","$$jqLite","$$jqLiteProvider","$$HashMap","$$HashMapProvider","$$cookieReader","$$CookieReaderProvider","jqNextId","jqId","camelCase","SPECIAL_CHARS_REGEXP","_","offset","toUpperCase","MOZ_HACK_REGEXP","jqLiteIsTextNode","HTML_REGEXP","jqLiteAcceptsData","NODE_TYPE_ELEMENT","NODE_TYPE_DOCUMENT","jqLiteHasData","jqCache","ng339","jqLiteBuildFragment","tmp","wrap","fragment","createDocumentFragment","createTextNode","appendChild","createElement","TAG_NAME_REGEXP","exec","wrapMap","_default","innerHTML","XHTML_TAG_REGEXP","lastChild","childNodes","firstChild","textContent","parsed","SINGLE_TAG_REGEXP","jqLiteWrapNode","wrapper","parentNode","replaceChild","argIsString","trim","jqLiteMinErr","jqLiteAddNodes","jqLiteParseHTML","jqLiteClone","jqLiteDealoc","onlyDescendants","jqLiteRemoveData","querySelectorAll","descendants","l","jqLiteOff","unsupported","expandoStore","jqLiteExpandoStore","handle","removeHandler","listenerFns","removeEventListenerFn","MOUSE_EVENT_MAP","expandoId","createIfNecessary","jqLiteData","isSimpleSetter","isSimpleGetter","massGetter","jqLiteHasClass","selector","jqLiteRemoveClass","cssClasses","setAttribute","cssClass","jqLiteAddClass","existingClasses","root","elements","jqLiteController","jqLiteInheritedData","documentElement","names","NODE_TYPE_DOCUMENT_FRAGMENT","host","jqLiteEmpty","removeChild","jqLiteRemove","keepData","jqLiteDocumentLoaded","action","win","readyState","setTimeout","getBooleanAttrName","booleanAttr","BOOLEAN_ATTR","BOOLEAN_ELEMENTS","getAliasedAttrName","ALIASED_ATTR","createEventHandler","eventHandler","event","isDefaultPrevented","defaultPrevented","eventFns","eventFnsLength","immediatePropagationStopped","originalStopImmediatePropagation","stopImmediatePropagation","stopPropagation","isImmediatePropagationStopped","handlerWrapper","specialHandlerWrapper","defaultHandlerWrapper","handler","specialMouseHandlerWrapper","target","related","relatedTarget","jqLiteContains","$get","hasClass","classes","addClass","removeClass","REGEX_STRING_REGEXP","VALIDITY_STATE_PROPERTY","string","manualLowercase","s","ch","String","fromCharCode","charCodeAt","manualUppercase","msie","documentMode","$inject","escapeForRegexp","noUnsafeEval","Function","rules","ngCspElement","ngCspAttribute","noInlineStyle","name_","el","NODE_TYPE_ATTRIBUTE","NODE_TYPE_COMMENT","full","major","minor","dot","expando","cache","addEventListenerFn","addEventListener","removeEventListener","mouseleave","mouseenter","thead","col","tr","td","optgroup","tbody","tfoot","colgroup","caption","th","Node","contains","compareDocumentPosition","ready","trigger","fired","eq","ngMin","ngMax","removeData","hasData","removeAttr","removeAttribute","css","lowercasedName","attributes","getNamedItem","specified","ret","text","getText","$dv","multiple","result","options","selected","arg1","arg2","nodeCount","Math","min","nodeValue","types","addHandler","noEventListener","off","one","onFn","replaceWith","replaceNode","insertBefore","children","contents","contentDocument","child","prepend","wrapNode","remove","detach","after","newElement","toggleClass","condition","className","classCondition","nextElementSibling","getElementsByTagName","extraParameters","dummyEvent","eventFnsCopy","handlerArgs","eventName","preventDefault","arg3","unbind"],"mappings":"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","file":"libs.js","sourcesContent":["'use strict';\n\n// Declare app level module which depends on views, and components\nvar app = angular.module('ImperaApp', [\n  'ui.router',\n  'ui.bootstrap',\n  'ngTable',\n  'hljs',\n  'dialogs.main',\n  'angularSpinner',\n  'angularAwesomeSlider',\n  'ch.filters',\n  'ImperaApp.directives',\n  'ImperaApp.portalView',\n  'ImperaApp.projectsView',\n  'ImperaApp.projectView',\n  'ImperaApp.resourceView',\n  'ImperaApp.resourceCentricView',\n  'ImperaApp.envView',\n  'ImperaApp.addEnv',\n  'ImperaApp.editEnv',\n  'ImperaApp.addProject',\n  'ImperaApp.graphView',\n  'imperaApi.config',\n  'ImperaApp.agentsView',\n  'ImperaApp.parametersView',\n  'ImperaApp.logsView',\n  'ImperaApp.reportView',\n  'ImperaApp.deployReportView',\n  'ImperaApp.controllers.refresh',\n  'ImperaApp.controllers.projects',\n  'ImperaApp.controllers.side',\n  'ImperaApp.feedback',\n  'ImperaApp.compileReport',\n  'ImperaApp.formsView',\n  'ImperaApp.snapshotView',\n  'ImperaApp.snapshotDetailView',\n  'ImperaApp.restoreView'\n])\n\napp.config([\"$urlRouterProvider\", function($urlRouterProvider) {\n  $urlRouterProvider.otherwise(\"/projects\");   \n}])\n\napp.controller(\"configCtrl\",[\"$scope\",\"imperaConfig\", \"dialogs\", function($scope, imperaConfig, dialogs){\n  $scope.config=imperaConfig\n  \n  $scope.openFeedback = function(user_tenant_Id){\n     dialogs.create('views/feedback/feedback.html','feedbackCtrl', { user:user_tenant_Id },{});    \n  }\n}])\n\napp.service(\"alertService\",[\"$rootScope\", function alertService($rootScope){\n\tvar alerts = [];\n\tvar alertService = {};\n\t\n\talertService.add=function(type,data){\n\t\tvar last = alerts[alerts.length-1]\n\t\tif(last && last.msg == data){\n\t\t\tlast.times = last.times+1;\n\t\t}else{\n\t\t\talerts.push({type:type,msg:data,times:1})\n\t\t}\n\t\t$rootScope.$broadcast(\"alert-update\",alerts)\n\t}\n    \n   \n    \n\treturn alertService;\n}])\n\napp.config([\"$httpProvider\", function($httpProvider){\n  $httpProvider.interceptors.push([\"$q\", \"alertService\", function($q,alertService) {\n    return {\n      'responseError': function(rejection) {\n        // do something on error\n\tvar alert = rejection.data?rejection.data.message:rejection.statusText\n\tif(!alert){\n\t\talert=\"Could not connect to server\";\n\t}\n        alertService.add(\"danger\",alert)\n        return $q.reject(rejection);\n        }\n    }\n                                   \n  }]);\n}])\n\napp.controller(\"alertCtrl\",[\"$scope\",\"imperaService\",function($scope,imperaService){\n  $scope.alerts = []\n  $scope.env = null\n\n  $scope.$on(\"$stateChangeStart\",function(event, toState, toParams, fromState, fromParams){\n        $scope.alerts.length = 0\n        $scope.env = toParams['env']\n        \n  })\n\n  $scope.$on(\"alert-update\",function(event,args){\n  \t$scope.alerts = args;\n  })\n\n  \n  $scope.closeAlert = function(index) {\n    $scope.alerts.splice(index, 1);\n  };\n\n\n \n}])\n","var services = angular.module('impera.services.backhaul',['ngTable'])\n\n\n//tricky little service to cause data to be reloaded upon a refresh event\n// but with the additional advantage that the front-end is only refreshed if \n// 1- data has been received\n// 2- the data has changed \n\n// a back haul instance is constructed on the scope\n\n// new Backhaul($scope)\n\nservices.service('Backhaul',\n\t[\"$q\", function($q) {\n\n       var backHaul = function backHaul(scope) {\n            var data;\n\n            var getData;\n            var args;\n            var reload;\n            var first = true;\n\n\n            var callGetData = function(){\n                return getData.apply(null,args);\n            }\n\n            var refresh = function(){\n                if(getData){\n                    callGetData().then(function(d){ \n                        if(!angular.equals(data,d)){\n                            data=d;\n                            reload();\n                        }\n                    })\n                }\n            }\n//this function expects n arguments\n//get(rld,gb,[args])\n// rld: a function to be called when a reload of the font-end must be triggered\n// gd: a function to the data, this function should return a promise \n// all following arguments are passed to gd\n\n//rld and gd should be the same each time a backhaul instance is called\n//when get is called the first time, it returns a promise for gd(*args)\n//when called a second time, with the same [args] cached data is returned\n//when called a second time, with different [args] it returns a promise for gd(*args)\n\n// if a refresh event is seen after the first call, gd(*args) is called and when the received data is different from before, rld is called \n                        \n            this.get = function(rld,gd){\n                if(first){\n                    scope.$on(\"refresh\",function(){refresh()}); \n                    first = false;\n                }\n\n                var newargs= Array.prototype.slice.call(arguments, 2)\n                getData = gd;\n                reload = rld;\n                if(data && angular.equals(args,newargs)){\n                   var out = $q.defer()\n                   out.resolve(data);\n                   return out.promise;\n                }else{\n                    args = newargs;\n                    return callGetData().then(function(d){\n                        data=d;  \n                        \n                        return d;\n                    })\n                }\n\n            }\n            \n            this.refresh = refresh\n\n           \n                        \n       }\n\n\n        return backHaul;\n    }]\n)\n\nservices.service('BackhaulTable', [\"Backhaul\", \"ngTableParams\", \"$filter\", function(Backhaul, ngTableParams, $filter) {\n\n    return function(scope, params, getDataSub) {\n        var backhaul = new Backhaul(scope)\n\n        var tableParams = new ngTableParams(params, {\n            getData: function($defer, params) {\n                var filters = {};\n                angular.forEach(params.filter(), function(value, key) {\n                    var splitedKey = key.match(/^([a-zA-Z+_]+)\\.([a-zA-Z_]+)$/);\n\n                    if (!splitedKey) {\n                        filters[key] = value;\n                        return;\n                    }\n\n                    splitedKey = splitedKey.splice(1);\n\n                    var father = splitedKey[0],\n                        son = splitedKey[1];\n                    if(!filters[father]){\n                        filters[father] = {};\n                    }\n                    filters[father][son] = value;\n                });\n\n                backhaul.get(\n                        function() {\n                            params.reload()\n                        },\n                        getDataSub, params)\n                    .then(function(data) {\n                        var len = data.length\n                        var orderedData = params.filter() ?\n                            $filter('filter')(data, filters) :\n                            data;\n\n                        // use build-in angular filter\n                        orderedData = params.sorting() ?\n                            $filter('orderBy')(orderedData, params.orderBy()) :\n                            orderedData;\n\n                        params.total(orderedData.length);\n                        $defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));\n\n                    });\n\n            }\n        });\n      tableParams.refresh = backhaul.refresh\n      return tableParams;\n    }\n}])\n\nservices.service('BackhaulTablePaged', [\"Backhaul\", \"ngTableParams\", \"$filter\", function(Backhaul, ngTableParams, $filter) {\n\n    return function(scope, params, getDataSub, field) {\n        var backhaul = new Backhaul(scope)\n\n        var tableParams = new ngTableParams(params, {\n            getData: function($defer, params) {\n                var filters = {};\n                angular.forEach(params.filter(), function(value, key) {\n                    var splitedKey = key.match(/^([a-zA-Z+_]+)\\.([a-zA-Z_]+)$/);\n\n                    if (!splitedKey) {\n                        filters[key] = value;\n                        return;\n                    }\n\n                    splitedKey = splitedKey.splice(1);\n\n                    var father = splitedKey[0],\n                        son = splitedKey[1];\n                    filters[father] = {};\n                    filters[father][son] = value;\n                });\n\n                backhaul.get(\n                        function() {\n                            params.reload()\n                        },\n                        getDataSub, (params.page() - 1) * params.count(),params.count())\n                    .then(function(info) {\n                        var data = info[field]\n                       \n                        var orderedData = params.filter() ?\n                            $filter('filter')(data, filters) :\n                            data;\n\n                        // use build-in angular filter\n                        orderedData = params.sorting() ?\n                            $filter('orderBy')(orderedData, params.orderBy()) :\n                            orderedData;\n\n                        params.total(info.count);\n                        $defer.resolve(orderedData);\n\n                    });\n\n            }\n        });\n      return tableParams;\n    }\n}])\n\n\n","'use strict';\n\n/**\n * @ngdoc service\n * @name impWebApp.Nodeservice\n * @description # Nodeservice Service in the impWebApp.\n */\nvar imperApi = angular.module('imperaApi',['imperaApi.config'])\n\nfunction formatDate(d){\n    if(d == null)\n        return d\n    return new Date(d)\n}\n\nfunction formatParameter(d){\n    d[\"updated\"] = formatDate(d[\"updated\"]); \n}\n\nfunction formatCompileSubReport(d){\n    d[\"completed\"] = formatDate(d[\"completed\"]); \n    d[\"started\"] = formatDate(d[\"started\"]); \n}\n\n\nfunction formatCompileReport(d){\n    d[\"completed\"] = formatDate(d[\"completed\"]); \n    d[\"started\"] = formatDate(d[\"started\"]); \n    d.reports.forEach(formatCompileSubReport);\n}\n\nfunction formatCompileReports(d){\n    d.reports.forEach(formatCompileReport);\n}\n\nfunction formateVersion(d){\n    d[\"date\"] = formatDate(d[\"date\"]); \n}\n\n\nimperApi.service('imperaService',\n\t[\"$http\", \"imperaConfig\", \"$q\", \"$cacheFactory\", \"$rootScope\", \"alertService\", function Nodeservice($http,imperaConfig,$q,$cacheFactory,$rootScope,alertService) {\n\t\tvar impAPI = {};\n\t\tvar impURL = imperaConfig.backend;\n\t\tvar envCache ={};\n\t\tvar projCache = {};\n\t\t//dirty hack to work around https://github.com/angular/angular.js/issues/5028\n\t\tvar lastEnv = \"\";\n\t\t\n\t\tvar checkEnv = function(env){\n\t\t    if(env!=lastEnv){\n\t\t        defaultCache.removeAll()\n\t\t        lastEnv=env\n\t\t    }\n\t\t}\n\t\t\n\n        var defaultCache = $cacheFactory(\"http-service-cache\")\n        $http.defaults.cache = defaultCache\n\n\t    $rootScope.$on(\"refresh\", function() {\n\t        defaultCache.removeAll();\n\t    })\n\n//utilities\n        var idRegEx = /([a-zA-Z0-9:_-]+)\\[([^,]+),([^=]+)=([^\\]]+)\\],v=(\\d+)/\n        \n        function parseID(id){\n            var o = idRegEx.exec(id)\n            if(!o){\n                alertService.add(\"info\",\"Report to dev: Bad ID received: \" + id)\n            }\n            return  {\n                \"agent_name\": o[2],\n                \"version\": o[5],\n                \"entity_type\": o[1],\n                \"attribute\": o[3],\n                \"attribute_value\": o[4]\n            }\n        }\n//project\n\t\timpAPI.getProjects = function() {\n\t\t\treturn $http.get(impURL + 'project').then(function(data){\n\t\t\t    data.data.projects.forEach(function(d){projCache[d.id]=d})\n\t\t\t    return data.data.projects;});\n\t\t};\n\n        \n        impAPI.getProjectsAndEnvironments = function() {\n\t\t\treturn $q.all({projects:impAPI.getProjects(),envs:impAPI.getEnvironments()}).then(\n                function(d){\n                    var projects = angular.copy(d.projects);\n                    var proI = {};\n                    projects.forEach(function(d){proI[d.id] = d; d.envs=[]})\n                    angular.copy(d.envs).forEach(function(d){proI[d.project].envs.push(d)})\n                    return projects;\n                }\n            )\n\t\t};\n        \n\t\n\t    impAPI.getProject = function(project_id) {\n\t        if(projCache[project_id]) {\n                var out = $q.defer()\n                out.resolve(projCache[project_id])\n                return out.promise\n            } else {\n//                return impAPI.getProjects().then(function(){return projCache[project_id];});\n                return $http.get(impURL + 'project/'+project_id).then(function(data) {\n                        projCache[data.data.project.id]=data.data.project\n                        return data.data.project;\n                });       \n            } \n\t    }\n\t\n        impAPI.addProject = function(name) {\n\t\t\treturn $http.put(impURL + 'project',{'name':name}).then(function(data){ \n\t\t\t    defaultCache.removeAll()\n\t\t\t    return data.data.project;});\n\t\t};\n\n        impAPI.removeProject = function(id) {\n\t\t\treturn $http.delete(impURL + 'project/'+id);\n\t\t};\n\n        impAPI.decommission = function(id) {\n\t\t\treturn $http.post(impURL + 'decommission/'+id);\n\t\t};\n//environment\n        impAPI.addEnvironment = function(projectid, name, repo_url, repo_branch) {\n\t\t\treturn $http.put(impURL + 'environment',{'project_id':projectid,'name':name,'repository':repo_url,'branch':repo_branch}).then(function(data){ return data.data.environment;});\n\t\t};\n\t\t\n\t\timpAPI.clone = function(envid, name ) {\n    \t\treturn impAPI.getEnvironment(envid).then(function(env){\n    \t\t    return impAPI.addEnvironment(env.project,name,env.repo_url,env.repo_branch);\n    \t\t})\n\t\t}\n\t\t\n\t\timpAPI.editEnvironment = function(env) {\n\t\t    return $http.post(impURL + 'environment/'+env.id,{'id':env.id,'name':env.name,'repository':env.repo_url,'branch':env.repo_branch}).then(function(data){ \n\t\t        envCache[env.id]=data.data.environment; \n\t\t        return data.data.environment;});\n\t\t}\n\n        impAPI.removeEnvironment = function(envid) {\n\t\t\treturn $http.delete(impURL + 'environment/'+envid);\n\t\t};\n\t\t\n\t\timpAPI.getEnvironments = function() {\n\t\t\treturn $http.get(impURL + 'environment').then(function(data){ \n\t\t\t\tdata.data.environments.forEach(function(d){envCache[d.id]=d})\n\t\t\t\treturn data.data.environments;});\n\t\t};\n\t\t\n\t\timpAPI.getEnvironmentsByProject = function(project_id) {\n\t\t    \n\t\t    return impAPI.getEnvironments().then( function(data) {\n                var out = [];\n\t\t        data.forEach(function(env){\n\t\t                if(env.project == project_id) {\n\t\t                    out.push(env);\n\t\t                }\n\t\t            })\n\t\t            return out;\n\t\t    });\n\t\t    \n\t\t}\n\t\t\n\t\timpAPI.getEnvironmentsWithProject = function() {\n\t\t    \n\t\t    return $q.all({projects:impAPI.getProjects(),envs:impAPI.getEnvironments()}).then(\n                function(d){\n                    var projects = d.projects;\n                    var proI = {};\n                    projects.forEach(function(d){proI[d.id] = d})\n                    var envs = angular.copy(d.envs)\n                    envs.forEach(function(d){d['project_full']=proI[d.project]})\n                    return envs;\n                }\n            )\n\t\t    \n\t\t}\n\n        impAPI.getEnvironment = function(id){\n            if( envCache[id]){\n                var out = $q.defer()\n                out.resolve(envCache[id])\n                return out.promise\n            }else{\n                return $http.get(impURL + 'environment/'+id).then(function(data){ \n    \t\t\t\tenvCache[data.data.environment.id]=data.data.environment\n\t    \t\t\treturn data.data.environment;});\n            }            \n        }\n\n//agent\n        impAPI.getAgents = function(){\n            return $http.get(impURL + 'agent').then(function(data){ \n                var out = []\n\t\t\t\tvar now = new Date(data.data.servertime).getTime()\n                \n                data.data.nodes.forEach( function(machine){\n                    machine.agents.forEach( function(agent){\n\t\t       \t\t   var ls=formatDate(agent.last_seen)\n                       out.push({\n                        \"name\":agent.name,\n                        \"environment\":agent.environment,\n                        \"last_seen\":ls,\n                        \"hostname\":agent.node,\n                        \"interval\":agent.interval,  \n                        \"expired\": ls.getTime()+(agent.interval*1000*2)<now\n                        });\n                    });\n\t\t\t\t});\n                return out\n            });\n        }\n\t\t\n//resources\n\t\timpAPI.getVersions = function(env) {\n\t\t    checkEnv(env)\n\t\t\treturn $http.get(impURL + 'cmversion',{headers:{\"X-Inmanta-tid\":env}}).then( \n                function(data){\n                    data.data.versions.forEach(formateVersion)\n                    return data.data;});\n\t\t};\n\t\n\t\timpAPI.deleteVersion = function(env,cmversion) {\n\t\t\treturn $http.delete(impURL + 'cmversion/'+cmversion,{headers:{\"X-Inmanta-tid\":env}})\n\t\t};\n\n\t\timpAPI.getVersionsPaged = function(env,from,count) {\n   \t\t    checkEnv(env)\n\t\t\treturn $http.get(impURL + 'cmversion?start='+from+'&limit='+count,{headers:{\"X-Inmanta-tid\":env}})\n\t\t\t\t.then( \n                function(data){\n                    data.data.versions.forEach(formateVersion)\n                    return data.data;});\n\t\t};\n\n\n\t    impAPI.getResources = function(env,cmversion) {\n\t\t    checkEnv(env)\n\t\t\treturn $http.get(impURL + 'cmversion/'+cmversion,{headers:{\"X-Inmanta-tid\":env}}).then( \n                function(data){\n                    return data.data\n                });\n\t\t};\n\t\t\n\t\t\n\t\timpAPI.getResourcesState  = function(env){\n\t\t    checkEnv(env)\n\t\t    return $http.get(impURL + 'environment/'+env+'?resources=1&versions=5').then( \n                function(data){\n                    return data.data.environment\n                });\n\t\t}\n\t\t//resource has version in id!\n\t\timpAPI.getResource = function(env,id) {\n\t\t    checkEnv(env)\n\t\t\treturn $http.get(impURL + 'resource/'+ window.encodeURIComponent(id)+\"?logs=\",{headers:{'X-Inmanta-tid':env}}).then( \n                function(data){\n                    return data.data.resource\n                });\n\t\t};\n\t\t\n\t\t\n\t\timpAPI.getUnkownsForEnv = function(env){\n\t\t    return impAPI.getVersions(env).then(function(f){\n\t\t        if(!f.versions || f.versions.length == 0){\n\t\t            return []\n\t            }\n\t\t        return impAPI.getResources(env,f.versions[0].version).then(function(f){\n\t\t            return f.unknowns\n\t\t        })\n\t\t    })\n\t\t}\n//parameters\n\t\timpAPI.getParameters = function(env) {\n\t\t    checkEnv(env)\n\t\t\treturn $http.post(impURL + 'parameter',{},{headers:{\"X-Inmanta-tid\":env}}).then( \n                function(data){\n                    data.data.parameters.forEach(formatParameter);\n                    data.data.now=formatDate(data.data.now)\n                    return data.data\n                });\n\t\t};\n\t\t\n\t    impAPI.getReportParameters = function(env) {\n\t\t    checkEnv(env)\n\t\t\treturn impAPI.getParameters(env).then(function(f){\n\t\t\t    return f.parameters.filter(function(v){\n\t\t\t        return v.metadata.type == \"report\"    \n\t\t        })\n\t\t    });\n\t\t};\n\n\n        impAPI.getParameter = function(env,name,resource) {\n            checkEnv(env)\n\t\t\treturn $http.get(impURL + 'parameter/'+ window.encodeURIComponent(name) + \"?resource_id=\"+window.encodeURIComponent(resource),{headers:{\"X-Inmanta-tid\":env}}).then( \n                function(data){\n                    formatParameter(data.data.parameter);\n                    return data.data.parameter\n                });\n\t\t};\n\t\t\n// Forms\n\n        function formatForm(form){\n            return {\n                id:form.form_id, \n                type:form.form_type\n            }\n                    \n        }\n        \n        function formatRecord(rec){\n            return {\n                changed:formatDate(rec.changed), \n                id:rec.record_id\n            }\n                    \n        }\n        \n        impAPI.getForms = function(env) {\n            checkEnv(env)\n\t\t\treturn $http.get(impURL + 'form',{headers:{\"X-Inmanta-tid\":env}}).then( \n                function(data){\n                    return data.data.forms.map(formatForm)\n                });\n\t\t};\t\n\t\t\n\t\timpAPI.getForm = function(env, id) {\n            checkEnv(env)\n\t\t\treturn $http.get(impURL + 'form/'+window.encodeURIComponent(id),{headers:{\"X-Inmanta-tid\":env}}).then( \n                function(data){\n                    return data.data.form\n                });\n\t\t};\t\n\t\t\n\t\timpAPI.getRecords = function(env, id) {\n            checkEnv(env)\n\t\t\treturn $http.get(impURL + 'records?form_type='+window.encodeURIComponent(id),{headers:{\"X-Inmanta-tid\":env}}).then( \n                function(data){\n                    return data.data.records.map(formatRecord)\n                });\n\t\t};\n\t\t\n\t\timpAPI.getFullRecords = function(env, id) {\n            checkEnv(env)\n            var out = $q.defer()\n            \n            impAPI.getRecords(env,id).then(function (recs){\n                $q.all(\n                    recs.map(\n                        function(r){\n                            return impAPI.getRecord(env,r.id)\n                        }\n                    )\n                ).then(out.resolve)\n            })\n            \n            return out.promise\n\t\t\t\n\t\t};\n\t\t\n\t\t\n\t\timpAPI.getRecord = function(env, id) {\n            checkEnv(env)\n\t\t\treturn $http.get(impURL + 'records/'+window.encodeURIComponent(id),{headers:{\"X-Inmanta-tid\":env}}).then( \n                function(data){\n                    return data.data.record\n                });\n\t\t};\t\n\t\t\n\t\timpAPI.deleteRecord = function(env, id) {\n            \n\t\t\treturn $http.delete(impURL + 'records/'+window.encodeURIComponent(id),{headers:{\"X-Inmanta-tid\":env}}).then(\n\t\t\t    function(f){\n\t\t\t        defaultCache.removeAll();\n\t\t\t        return f;\n\t\t        })\n\t\t};\t\n\t\t\n\t\timpAPI.createRecord = function(env, type, fields) {\n            var newf = {}\n            angular.forEach(fields,function(v,k){newf[k]=String(v)})\n\t\t\treturn $http.post(impURL + 'records', {form_type:type,form:newf},{headers:{\"X-Inmanta-tid\":env}}).then(\n\t\t\t    function(f){\n\t\t\t        defaultCache.removeAll();\n\t\t\t        return f;\n\t\t        })\n\t\t};\t\n\t\t\n\t\timpAPI.updateRecord = function(env, id, fields) {\n            var newf = {}\n            angular.forEach(fields,function(v,k){newf[k]=String(v)})\n\t\t\treturn $http.put(impURL + 'records/'+window.encodeURIComponent(id), {form:newf},{headers:{\"X-Inmanta-tid\":env}}).then(\n\t\t\t    function(f){\n\t\t\t        defaultCache.removeAll();\n\t\t\t        return f;\n\t\t        })\n\t\t};\t\t\n//snapshots\nfunction formatSnapshot(d){\n    d[\"started\"] = formatDate(d[\"started\"]); \n    d[\"finished\"] = formatDate(d[\"finished\"]); \n}\n\n        impAPI.getSnapshots = function(env){\n            checkEnv(env)\n\t\t\treturn $http.get(impURL + 'snapshot',{headers:{\"X-Inmanta-tid\":env}}).then( \n                function(data){\n                    data.data.snapshots.forEach(formatSnapshot)\n                    return data.data.snapshots\n            });\n        }\n        \n        impAPI.getSnapshot = function(env,id){\n            checkEnv(env)\n\t\t\treturn $http.get(impURL + 'snapshot/'+window.encodeURIComponent(id),{headers:{\"X-Inmanta-tid\":env}}).then( \n                function(data){\n                    formatSnapshot(data.data.snapshot)\n                    return data.data.snapshot\n            })\n        }\n        \n        impAPI.deleteSnapshot = function(env,id){\n            checkEnv(env)\n\t\t\treturn $http.delete(impURL + 'snapshot/'+window.encodeURIComponent(id),{headers:{\"X-Inmanta-tid\":env}})\n        }\n        \n        impAPI.createSnapshot = function(env,name){\n            checkEnv(env)\n\t\t\treturn $http.post(impURL + 'snapshot', {name:name},{headers:{\"X-Inmanta-tid\":env}})\n        }\n        \n         impAPI.restoreSnapshot = function(env,id){\n\t\t\treturn $http.post(impURL + 'restore', {snapshot:id},{headers:{\"X-Inmanta-tid\":env}})\n        }\n        \n        impAPI.getAllSnapshots = function(env){\n            var out = $q.defer()\n            \n            impAPI.getSnapshots(env).then(function (recs){\n                $q.all(\n                    recs.map(\n                        function(r){\n                            return impAPI.getSnapshot(env,r.id)\n                        }\n                    )\n                ).then(out.resolve)\n            })\n            \n            return out.promise\n        }\n\nfunction formatRestore(d){\n    d[\"started\"] = formatDate(d[\"started\"]); \n    d[\"finished\"] = formatDate(d[\"finished\"]); \n}\n        impAPI.getRestores = function(env){\n            return $http.get(impURL + 'restore',{headers:{\"X-Inmanta-tid\":env}}).then( \n                function(data){\n                    data.data.restores.forEach(formatRestore)\n                    return data.data.restores\n                });\n        }\t\n\n        impAPI.getEnrichedRestores = function(env){\n            var out = $q.defer()\n            \n            impAPI.getRestores(env).then(function (rest){\n                $q.all(\n                    rest.map(\n                        function(r){\n                            return impAPI.getSnapshot(env,r.snapshot).then(function(f){\n                                r['snapshot_full']=f\n                                r['snapshot_id'] = f.name\n                                return r\n                            },function(){\n                                r['snapshot_id'] = r.id;\n                                return r\n                            })\n                        }\n                    )\n                ).then(out.resolve)\n            })\n            \n            return out.promise \n        }\n\n        impAPI.deleteRestore = function(env,id){\n            return $http.delete(impURL + 'restore/'+window.encodeURIComponent(id),{headers:{\"X-Inmanta-tid\":env}})\n        }\t\n\n\n//deploy\n\t\timpAPI.deploy = function(env, cmversion, push) {\n\t\t    return $http.post(impURL + 'cmversion/'+cmversion,{'push':push},{headers:{'X-Inmanta-tid':env}}).then(\n\t\t        function(data){ \n\t\t            return data.data;\n\t\t        });\n\t\t};\n\t\t\n\t\t\n\t\tfunction formatAction(action){\n             action[\"timestamp\"] = formatDate(action[\"timestamp\"]);\n            return action\n        }\n\n        function formatActionReport(res){\n            var out = []\n            \n            res.actions.forEach(function(act){\n                if(act.data && Object.keys(act.data).length > 0){\n                    out.push({\n                        id:res.id,\n                        type:res[\"id_fields\"][\"entity_type\"],\n                        attr:res[\"id_fields\"][\"attribute\"],\n                        attr_value:res[\"id_fields\"][\"attribute_value\"],\n                        id_fields:res[\"id_fields\"],\n                        action:act,\n                        status:res.status,\n                        message:act.message.trim()\n                    })\n                }else if(act.level != \"INFO\"){\n                     out.push({\n                        id:res.id,\n                        type:res[\"id_fields\"][\"entity_type\"],\n                        attr:res[\"id_fields\"][\"attribute\"],\n                        attr_value:res[\"id_fields\"][\"attribute_value\"],\n                        id_fields:res[\"id_fields\"],\n                        action:act,\n                        status:res.status,\n                        message:act.message.trim()\n                    })\n                }\n            })\n            \n            return out;\n        }\n        \n        \n\n        impAPI.getDeployReport = function(env,version) {\n            checkEnv(env)\n            return $http.get(impURL + 'cmversion/'+ window.encodeURIComponent(version)+\"?include_logs=true&log_filter=deploy\",\n                {headers:{'X-Inmanta-tid':env}}).then(\n                function(data){\n                    var resources = []\n                    data.data.resources.forEach(function(res){\n                      \n                        if(res.actions && res.actions.length>0){\n                            resources = resources.concat(formatActionReport(res))\n                        } \n                        \n                        \n                        \n                        \n                    })\n                    return {resources:resources,unknowns:data.data.unknowns};               \n                });\n                \n          };\n\n\t\t\n//dryrun\nfunction formatDryrunShort(d){\n    d[\"date\"] = formatDate(d[\"date\"]); \n}\n\nfunction formatDryruns(d){\n    d.forEach(formatDryrunShort);\n}\n\nfunction formatDryrun(d){\n     d[\"date\"] = formatDate(d[\"date\"]); \n     for(var k in d.resources){\n        d.resources[k][\"id_fields\"] = parseID(k)\n     }\n    \n}\n\n        impAPI.dryrun = function(env, cmversion) {\n            checkEnv(env)\n\t\t    return $http.post(impURL + 'dryrun/'+cmversion,{},{headers:{'X-Inmanta-tid':env}}).then(\n\t\t        function(data){\n\t\t            formatDryrun(data.data.dryrun);\n\t\t            return data.data.dryrun;\n\t            });\n\t\t};\n\n        impAPI.getDryruns = function(env, cmversion) {\n            checkEnv(env)\n            if(cmversion){\n                return $http.get(impURL + 'dryrun?version='+cmversion,{headers:{'X-Inmanta-tid':env}}).then(\n                    function(data){\n                        formatDryruns(data.data.dryruns)\n                        return data.data.dryruns;\n                    });\n            }else{\n                return $http.get(impURL + 'dryrun',{headers:{'X-Inmanta-tid':env}}).then(\n                    function(data){ \n                        formatDryruns(data.data.dryruns)\n                        return data.data.dryruns;\n                    });\n            }\n\t\t    \n\t\t};\n\t\t\n\t\timpAPI.getDryrun = function(env, id) {\n\t        checkEnv(env)\n\t\t     return $http.get(impURL + 'dryrun/'+window.encodeURIComponent(id),{headers:{'X-Inmanta-tid':env}}).then(\n                    function(data){\n                        formatDryrun(data.data.dryrun)\n                        return data.data.dryrun;\n                    });\n\t\t}\n\n//files\n        impAPI.getFile = function(id) {\n        \n\t\t\treturn $http.get(impURL + 'file/'+ window.encodeURIComponent(id)).then( \n                function(data){\n                    data.data.content = window.atob(data.data.content)\n                    return data.data\n                });\n\t\t};\n\t\t\n    \timpAPI.downloadFile = function(id) {\n\t\t\twindow.open(impURL + 'file/'+ window.encodeURIComponent(id))\n\t\t};\n\t\t\n        impAPI.getDiff = function(h1,h2) {\n\t\t\treturn $http.post(impURL + 'filediff',{a:h1, b:h2}).then( \n                function(data){\n                    return data.data\n                });\n\t\t};\n//logs\n       impAPI.getLogForResource = function(env,id) {\n           checkEnv(env)\n\t\t\treturn $http.get(impURL + 'resource/'+ window.encodeURIComponent(id)+\"?logs=true\",{headers:{'X-Inmanta-tid':env}}).then( \n                function(data){\n                    return data.data\n                });\n\t\t};\n\t\t\n\t\timpAPI.sendFeedback = function(feedback) {\n            // return TODO\n            // DUMMY CODE\n\t\t\t    var out = $q.defer()\n                out.resolve(null)\n                return out.promise\n\t\t}\n\n// compile \n        impAPI.compile = function(env) {\n\t\t\treturn $http.get(impURL + 'notify/'+ env + '?update=0');\n\t\t};\n\t\t\n\t\t impAPI.updateCompile = function(env) {\n\t\t\treturn $http.get(impURL + 'notify/'+ env );\n\t\t};\n\n         impAPI.isCompiling = function(env) {\n\t\t\treturn $http.head(impURL + 'notify/'+ env).then(function(d){\n                if(d.status==200){\n                    return true\n                }else{\n                    return false\n                }\n            });\n\t\t};\n\n        impAPI.getCompileReports = function(env) {\n\t\t\treturn $http.get(impURL + 'compilereport?environment='+env).then( function(data){\n                    formatCompileReports(data.data);\n                    return data.data.reports\n                });\n\t\t};\n\n\n\t\treturn impAPI;\n}]);\n\n\n\n\n\n","var services = angular.module('impera.services.time',[])\n\n\n//based on kibana\n\n\n//will cause \"refresh\" events to be broadcasted to all $scopes\n\nservices.service('timeSrv',\n\t[\"$rootScope\", \"$timeout\", function($rootScope,$timeout) {\n        var timeSrv = {};\n        var refresh, refresh_timer, myinterval;\n        \n        timeSrv.getRefresh = function(){\n            return refresh\n        }\n\n        timeSrv.getInterval = function(){\n            return myinterval\n        }\n        \n        //set interval takes a human reable interval (e.g: 1s)\n        timeSrv.setInterval = function (interval) {\n            myinterval = interval;\n            interval = timeSrv.interval_to_ms(interval)\n            if (interval) {\n               refresh = interval;\n               timeSrv.start_refresh(interval);\n            } else {\n               myinterval = \"Off\";\n               timeSrv.cancel_refresh();\n            }\n        }\n\n        timeSrv.refresh = function() {\n            $rootScope.$broadcast('refresh');\n        };\n\n        timeSrv.start_refresh = function (after_ms) {\n            timeSrv.refresh();\n            timeSrv.cancel_refresh();\n            refresh_timer = $timeout(function () {\n                timeSrv.start_refresh(after_ms);\n            }, after_ms);\n        };\n\n        timeSrv.cancel_refresh = function () {\n           $timeout.cancel(refresh_timer);\n        };\n\n\n//from kibana\n\n         var interval_regex = /(\\d+(?:\\.\\d+)?)([Mwdhmsy])/;\n\n  // histogram & trends\n  var intervals_in_seconds = {\n    y: 31536000,\n    M: 2592000,\n    w: 604800,\n    d: 86400,\n    h: 3600,\n    m: 60,\n    s: 1\n  };\n\n\n        timeSrv.describe_interval = function (string) {\n            var matches = string.match(interval_regex);\n            if (!matches || !intervals_in_seconds[matches[2]]) {\n                throw new Error('Invalid interval string, expexcting a number followed by one of \"Mwdhmsy\"');\n            } else {\n                return {\n                sec: intervals_in_seconds[matches[2]],\n                type: matches[2],\n                count: parseInt(matches[1], 10)\n                };\n            }\n        };\n\n        timeSrv.interval_to_ms = function(string) {\n            var info = timeSrv.describe_interval(string);\n            return info.sec * 1000 * info.count;\n        };\n        \n        timeSrv.setInterval(\"5s\")\n        \n        return timeSrv;\n\n     \n    }]\n)\n","var imperApi = angular.module('ImperaApp.directives', [])\n\nimperApi.filter('nozero', function() {\n    return function(input) {\n        if (input == 0) {\n            return \"\"\n        }\n        return input;\n    };\n})\n\nimperApi.directive(\"deployProgress\", function() {\n    var typesSeq = ['failed', 'skipped', 'deployed']\n    var types = {\n        'deployed': 'success',\n        'skipped': 'info',\n        'failed': 'danger'\n    }\n\n    var getProgress = function(version) {\n        var prog = {}\n        var bars = []\n        var status = version.status\n        var total = version.total\n        for (var res in status) {\n            var state = status[res]\n            if (state in prog) {\n                prog[state]++\n            } else {\n                prog[state] = 1\n            }\n        }\n\n        typesSeq.forEach(function(key) {\n            var value = prog[key]\n            if (value) {\n\n                bars.push({\n                    \"name\": key,\n                    \"value\": value * 100 / total,\n                    \"label\": value,\n                    \"type\": types[key]\n                })\n            }\n\n        })\n\n        var progress = {\n            'total': version.total,\n            'bars': bars,\n            'done': version.done\n        }\n\n        return progress\n    }\n\n\n    return {\n        restrict: 'E',\n        templateUrl: 'partials/directives/deployProgress.html',\n        transclude: true,\n        scope: {\n            datain: '=data',\n            name: '=name',\n            action: '=',\n            emptyaction: '=?emptyaction',\n            emptyname: '=?emptyname'\n        },\n        link: function(scope, element, attrs) {\n            scope.width = 10;\n            if (attrs[\"width\"]) {\n                scope.width = attrs[\"width\"]\n            }\n\n            scope.remainder = 10 - scope.width;\n            scope.data = null;\n            scope.$watch('datain', function(newValue, oldValue) {\n                if (newValue) {\n                    scope.data = getProgress(newValue)\n                }\n            }, true)\n\n        }\n    };\n})\n\n\nimperApi.directive(\"imBreadcrumb\", ['$stateParams','imperaService',function($stateParams,imperaService) { \n    return {\n        restrict: 'E',\n        templateUrl: 'partials/directives/breadcrumb.html',\n        scope: {\n            name: '=?name',\n            id: '=?id'\n        },\n        link: function(scope, element, attrs) {\n            scope.breadcrumb=[]\n            \n            function addItem(name, id, sref){\n                var out = {\n                    name:name,\n                    id:id,\n                    sref:sref,\n                    last:false\n                }\n                scope.breadcrumb.push(out)\n                return out\n            }\n            \n            addItem(\"Home\",null,\"projects\")\n            if($stateParams.env){\n                 var envi = addItem(\"Environment\",\"\",\"envs({env:'\"+$stateParams.env+\"'})\")\n                 imperaService.getEnvironment($stateParams.env).then(function(d){\n                     envi.id = d.name\n                 })\n            }\n            \n            if($stateParams.version){\n                 addItem(\"Version\",$stateParams.version,\"resources({env:'\"+$stateParams.env+\"',version:'\"+$stateParams.version+\"'})\")\n            }  \n            \n            if(attrs[\"name\"]){\n                 addItem(scope.name,scope.id,null)\n            }        \n            scope.breadcrumb[scope.breadcrumb.length-1].last=true;\n        }\n    };\n}])\n\n","'use strict';\n\nvar rscdet = angular.module('ImperaApp.inputDialog', ['imperaApi','dialogs.main'])\n\nrscdet.controller('inputDialogCtrl',['$scope','$modalInstance','data','imperaService',function($scope,$modalInstance,data,imperaService){\n\t//-- Variables -----//\n\n\t$scope.header = data.header ;\n   \t$scope.icon = 'glyphicon glyphicon-info-sign';\n    $scope.content= data.content\n\t\n\t$scope.close = function(){\n\t\t$modalInstance.close($scope.result);\n\t\t$scope.$destroy();\n\t}; // end close\n}]); // end WaitDialogCtrl\n","'use strict';\n\nvar resv = angular.module('ImperaApp.controllers.projects', ['imperaApi'])\n\nresv.controller('projectsController',['$scope','imperaService',function($scope,imperaService){\n\n   function load(){\n       imperaService.getProjectsAndEnvironments().then(function(d){$scope.projects=d})\n   }\n   \n   load()\n   $scope.$on('refresh',load)\n    \n   $scope.$on(\"$stateChangeStart\",function(event, toState, toParams, fromState, fromParams){\n       if(toParams[\"env\"]){\n           setEnv(toParams[\"env\"])\n       }else{\n            $scope.currentEnv = null;\n            if(toParams[\"project\"]){\n                setProject(toParams[\"project\"])\n            }else{\n                $scope.currentProject = null;\n            }\n       }\n    })\n\n\n   function setEnv(envid){\n       imperaService.getEnvironment(envid).then(function(d){\n            $scope.currentEnv = d\n            setProject(d.project)})\n   }\n\n   function setProject(pid){\n       imperaService.getProject(pid).then(function(d){$scope.currentProject = d})\n   }\n\n}])\n","'use strict';\n\nvar resv = angular.module('ImperaApp.controllers.refresh', ['impera.services.time'])\n\nresv.controller('refreshController',['$scope','timeSrv',function($scope,timeSrv){\n     $scope.timeSrv = timeSrv\n\n    \n     $scope.refresh_intervals = ['off','1s','5s','10s','30s','1m','5m','15m','30m','1h','2h','1d']\n\n     $scope.refresh = timeSrv.getInterval()\n     $scope.$on(\"refresh\",function(){$scope.lastTime=Date.now();})\n\n     $scope.setRefresh = function(interval){\n            if(interval==\"off\"){\n                interval='0s'\n                $scope.refresh=0;\n            }else{\n                $scope.refresh=interval;\n            }\n            timeSrv.setInterval(interval);\n     }\n}])\n","'use strict';\n\nvar resv = angular.module('ImperaApp.controllers.side', ['ui.router'])\n\nresv.controller('sideController',['$scope', '$rootScope', 'imperaService', \"$stateParams\",function($scope, $rootScope, imperaService, $stateParams) {\n\t$scope.state= $stateParams\n\t\n\t\n}])\n","'use strict';\n\nvar resv = angular.module('ImperaApp.addProject', ['ui.router','imperaApi','ngTable'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n $stateProvider\n    .state('addProject', {\n      url: \"/addProject\",\n      views:{\n        \"body\":{\n            templateUrl: \"views/addProject/addProject.html\",\n            controller:\"addProjectController\"\n        },\n        \"side\":{\n            templateUrl: \"partials/emptysidebar.html\"\n          \n        }\n      }\n      \n    })\n}]);\n\nresv.controller('addProjectController', ['$scope', 'imperaService', '$state', function($scope, imperaService, $state) {\n \n    $scope.name = null;\n\n   \n    $scope.ready = function(){\n        return $scope.selectedProject;\n    }\n    imperaService.getProjects().then(function(data) {\n        $scope.projects = data;\n        \n    });\n\n    $scope.addProject = function(name){\n        //console.log(project,name,repo,tag)\n        imperaService.addProject(name).then(function(d){$state.go(\"addEnv\",{project:d.id})})\n    }\n\n    \n    $scope.projects = null\n  \n}]);\n","'use strict';\n\n\n\nvar resv = angular.module('ImperaApp.agentsView', ['ui.router','imperaApi','ngTable','impera.services.backhaul'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n $stateProvider\n    .state('agents', {\n      url: \"/agents?env\",\n      views:{\n        \"body\":{\n            templateUrl: \"views/agents/agentBody.html\",\n            controller:\"agentController\"\n        },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n      }\n      \n    })\n}]);\n\nresv.controller('agentController', ['$scope', 'imperaService', \"$stateParams\",\"$q\",\"BackhaulTable\",function($scope, imperaService,$stateParams,$q,BackhaulTable) {\n \n $scope.state = $stateParams\n \n $scope.getEnv = function(id){\n    var out = [];\n    imperaService.getEnvironment(id).then(function(d){out[0]=d;});\n    \n    return out;\n }\n $scope.envs = $q.defer()\n\n $scope.tableParams = new BackhaulTable($scope,{\n        page: 1,            // show first page\n        count: 1000          // count per page\n       \n    }, function(params) {\n             return imperaService.getAgents().then(function(data) {\n                    $scope.alldata = {}\n                    var envs = [];\n\n                    (new Set(data.map(function(d){return d.environment})))\n                        .forEach(function(item){envs.push(item)})\n                    $scope.envs.resolve(envs)                    \n                    \n                    return data;\n                    \n            }) \n\n            \n           \n    });\n\n if($stateParams[\"env\"]){\n\t\n\t\t$scope.tableParams.filter()['environment']=$stateParams[\"env\"]\n\t\n }\n $scope.resources = null\n $scope.names = function() {\n            var def = $q.defer(),\n                    names = [], \n                    waiters=0;\n\n            $scope.envs.promise.then(function(envs){\n                angular.forEach(envs, function(id){\n               waiters = waiters+1;\n               imperaService.getEnvironment(id)\n                    .then(function(d){\n                         names.push({\n                            'id':  id,\n                            'title': d.name\n                            });\n                         waiters = waiters -1;\n                         if(waiters == 0){\n                            def.resolve(names);\n                         }           \n                    });\n                   \n                \n            });\n            })\n            \n            \n            return def;\n        };\n}]);\n","'use strict';\n\n\n\nvar resv = angular.module('ImperaApp.compileReport', ['ui.router', 'imperaApi'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('compileReport', {\n            url: \"/environment/:env/compilereport\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/compileReport/compileBody.html\",\n                    controller: \"compileReportController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\n\n\nresv.controller('compileReportController', ['$scope', 'imperaService', \"$stateParams\",\n    function($scope, imperaService, $stateParams) {\n        \n        $scope.state = $stateParams\n        \n        imperaService.getEnvironment($stateParams.env).then(function(d) {\n            $scope.env = d\n        });\n        \n        function load(){\n            imperaService.getCompileReports($stateParams.env).then(function(d) {\n                $scope.compiles = d\n                //d.forEach(function(d){d.reports.forEach(function(f){f.open=f.errstream.length != 0})})\n                d.forEach(function(d){d.reports.forEach(function(f){\n                    if(!('open' in f)){\n                        f.open=(f.returncode!=0)\n                    }\n                })})\n                if(!$scope.compile){\n                    $scope.compile=d[0]\n                }\n            });\n        }\n        \n        load();\n        \n        $scope.$on('refresh',load)\n\n        \n    }\n\n    \n]);\n","'use strict';\n\n\n\nvar resv = angular.module('ImperaApp.deployReportView', ['ui.router', 'imperaApi', 'ngTable','dialogs.main','ImperaApp.diffDetail'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('deployReport', {\n            url: \"/environment/:env/version/:version/deploy\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/deployReport/reportBody.html\",\n                    controller: \"deployReportController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\n\n\nresv.controller('deployReportController', ['$scope', 'imperaService', \"$stateParams\",\"dialogs\",\"BackhaulTable\",\"$q\",\"$rootScope\",\n    function($scope, imperaService, $stateParams,dialogs,BackhaulTable, $q, $rootScope) {\n        \n\n        $scope.state = $stateParams\n        \n        $scope.tableParams = new BackhaulTable($scope,{\n            page: 1, // show first page\n            count: 50 // count per page,\n        }, function(params){\n                  \n            return imperaService.getDeployReport($stateParams.env,$stateParams.version).then(function(d) {\n                $scope.data = d;\n                return d.resources;\n            });\n           \n\n        });\n        \n      \n        imperaService.getEnvironment($stateParams.env).then(function(d) {\n            $scope.env = d\n        });\n\n        $scope.open = function(d,id) {\n      \n            dialogs.create('views/diffDetail/diffDetail.html', 'diffDetailCtrl', {\n                diff:d,\n                id:id\n            }, {})\n       \n\t\t\n\n        }\n    \n    }\n\n    \n]);\n","'use strict';\n\nvar rscdet = angular.module('ImperaApp.diffDetail', ['imperaApi','dialogs.main'])\n\nrscdet.controller('diffDetailCtrl',['$scope','$modalInstance','data','imperaService',function($scope,$modalInstance,data,imperaService){\n\t//-- Variables -----//\n    $scope.content=\"\"\n    $scope.header=data.id\n    imperaService.getDiff(data.diff[0],data.diff[1]).then(function(f){\n        $scope.content = f.diff\n    })\n    \n\n\n   \t$scope.icon = 'glyphicon glyphicon-info-sign';\n\n    \n\n\t//-- Methods -----//\n\t\n\t$scope.close = function(){\n\t\t$modalInstance.close();\n\t\t$scope.$destroy();\n\t}; // end close\n}]); // end WaitDialogCtrl\n","'use strict';\n\nvar resv = angular.module('ImperaApp.editEnv', ['ui.router','imperaApi','ngTable'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n $stateProvider\n    .state('editEnv', {\n      url: \"/editEnvironment/:env\",\n      views:{\n        \"body\":{\n            templateUrl: \"views/editEnv/editEnv.html\",\n            controller:\"editEnvController\"\n        },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"envController\"\n\n                }\n      }\n      \n    })\n}]);\n\nresv.controller('editEnvController', ['$scope', 'imperaService', '$stateParams', '$state', function($scope, imperaService, $stateParams, $state) {\n \n    $scope.state = $stateParams\n \n    \n    \n    imperaService.getEnvironment($stateParams.env).then(function(d) {\n        $scope.env = d\n        imperaService.getProject(d.project).then(function(p){\n            $scope.selectedProject = p;\n        })\n        $scope.name = d.name\n        $scope.selectedTag = d.repo_branch\n        $scope.repo = d.repo_url\n    });\n\n    $scope.editEnv = function(projectid, env_name, repo_url, branch) {\n        $scope.env.name = env_name;\n        $scope.env.repo_branch = branch;\n        $scope.env.repo_url = repo_url\n        imperaService.editEnvironment($scope.env).then(function(d){$state.go(\"envs\",{ env:d.id })});\n    }\n}]);\n","'use strict';\n\n\n\nvar resv = angular.module('ImperaApp.envView', ['ui.router', 'imperaApi', 'ngTable','impera.services.backhaul'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('envs', {\n            url: \"/environment/:env\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/env/envBody.html\",\n                    controller: \"envController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\nresv.controller('envFunctionController', ['$scope','$rootScope', 'imperaService', '$stateParams','$state','dialogs', function($scope,$rootScope, imperaService, $stateParams, $state, dialogs) {\n    $scope.state = $stateParams\n    \n     $scope.compile = function(env){\n        imperaService.compile(env).then(function(){\n            $scope.cstate=true; \n            $rootScope.$broadcast('refresh')  \n        })\n    }\n    \n    $scope.decommission = function(env){\n       var dlg = dialogs.confirm(\"Confirm delete\",\"Do you really want to decomission the environment \" + env.name + \" this can NOT BE UNDONE! \");\n\t\tdlg.result.then(function(btn){\n\t\t\t imperaService.decommission(env).then(\n                    function(d){\n                        $rootScope.$broadcast('refresh'); \n                    })\n\t\t})\n    }\n\n\n     $scope.clone = function(env){\n         dialogs.create('partials/input/inputDialog.html', 'inputDialogCtrl', {\n                header: \"Clone name\",\n                content:\"Name for the clone\"\n            }, {}).result.then(function(name){\n                imperaService.clone(env,name).then(\n                    function(d){\n                        $rootScope.$broadcast('refresh'); \n                        $state.go(\"envs\",{ env:d.id })\n                    })\n            })\n     }\n    \n    $scope.updateCompile = function(env){\n        imperaService.updateCompile(env).then(function(){\n            $scope.cstate=true; \n            $rootScope.$broadcast('refresh')  \n        })\n    }\n\n    var getCompileState = function(){\n        if($scope.state.env){\n            imperaService.isCompiling($scope.state.env).then(function(data){$scope.cstate=data;  })\n        }\n    }\n\n    getCompileState()\n    $scope.$on(\"refresh\",getCompileState)\n    \n}]);\n\nresv.controller('envController', ['$scope','$rootScope', 'imperaService', \"$stateParams\", \"BackhaulTablePaged\",'dialogs',function($scope,$rootScope, imperaService, $stateParams, BackhaulTablePaged,dialogs) {\n\n    $scope.state = $stateParams\n  \n\n    $scope.tableParams = BackhaulTablePaged($scope,{\n        page: 1, // show first page\n        count: 10, // count per page\n        sorting: {\n            'id_fields.entity_type': 'asc' // initial sorting\n        }\n    }, function(start,extent) {\n    \n           return imperaService.getVersionsPaged($stateParams.env, start, extent).then(\n            function(d){\n                \n                d.versions.forEach(function (d){d.state=getState(d)})\n                return d;\n            })\n            \n    }, \"versions\");\n    \n    $scope.resources = null\n    imperaService.getEnvironment($stateParams.env).then(function(d) {\n        $scope.env = d\n    });\n    \n   \n    $scope.startDryRun = function(res) {\n            var resVersion = res.version \n            imperaService.dryrun($stateParams.env,resVersion).then(function(d){\n                $rootScope.$broadcast('refresh')\n            });     \n    }\n\n    $scope.deploy = function(res) {\n        var resVersion = res.version \n        imperaService.deploy($stateParams.env,resVersion,true).then(function(d){$rootScope.$broadcast('refresh')});          \n    }\n  \n\n    $scope.deleteVersion = function(res) {\n\t    var resVersion = res.version \n\t    var dlg = dialogs.confirm(\"Confirm delete\",\"Do you really want to delete the version \" + resVersion);\n        dlg.result.then(function(btn){\n\t        imperaService.deleteVersion($stateParams.env,resVersion).then(function(d){$rootScope.$broadcast('refresh')});\n        })  \n    }\n    \n    var getState = function(res){\n        if(!res.released){\n            return \"new\"\n        }\n        if(res.deployed){\n            return \"deployed\"\n        }\n        \n        return res.result\n    }\n\n}]);\n","'use strict';\n\nvar rscdet = angular.module('ImperaApp.feedback', ['imperaApi','dialogs.main'])\n\nrscdet.controller('feedbackCtrl',['$scope','$modalInstance','data','imperaService',\n        function($scope,$modalInstance,data,imperaService) {\n\t//-- Variables -----//\n    \n\n\t//-- Methods -----//\n\t\n\t$scope.submitFeedback = function(feedback) {\n\t    imperaService.sendFeedback(feedback).then(function(d){$modalInstance.close('closed');});\n\t    \n\t}\n\t\n\t$scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}]);\n\n\n//app.controller(\"modalAccountFormController\", ['$scope', '$modal', '$log',\n\n//    function ($scope, $modal, $log) {\n\n//        $scope.showForm = function () {\n//            $scope.message = \"Show Form Button Clicked\";\n//            console.log($scope.message);\n\n//            var modalInstance = $modal.open({\n//                templateUrl: 'modal-form.html',\n//                controller: ModalInstanceCtrl,\n//                scope: $scope,\n//                resolve: {\n//                    userForm: function () {\n//                        return $scope.userForm;\n//                    }\n//                }\n//            });\n\n//            modalInstance.result.then(function (selectedItem) {\n//                $scope.selected = selectedItem;\n//            }, function () {\n//                $log.info('Modal dismissed at: ' + new Date());\n//            });\n//        };\n//            }]);\n\n//var ModalInstanceCtrl = function ($scope, $modalInstance, userForm) {\n//    $scope.form = {}\n//    $scope.submitForm = function () {\n//        if ($scope.form.userForm.$valid) {\n//            console.log('user form is in scope');\n//            $modalInstance.close('closed');\n//        } else {\n//            console.log('userform is not in scope');\n//        }\n//    };\n//};\n","'use strict';\n\nvar rscdet = angular.module('ImperaApp.fileDetail', ['imperaApi','dialogs.main'])\n\nrscdet.controller('fileDetailCtrl',['$scope','$modalInstance','data','imperaService',function($scope,$modalInstance,data,imperaService){\n\t//-- Variables -----//\n\n\t$scope.header = \"Details for \" + data.resource.id ;\n    $scope.id = data.resource.fields.hash;\n   \t$scope.icon = 'glyphicon glyphicon-info-sign';\n    $scope.content=\"\"\n    imperaService.getFile($scope.id).then(function(f){\n        $scope.content = f.content\n    })\n    \n\n\t//-- Methods -----//\n\t\n\t$scope.close = function(){\n\t\t$modalInstance.close();\n\t\t$scope.$destroy();\n\t}; // end close\n}]); // end WaitDialogCtrl\n","'use strict';\n\n\n\nvar resv = angular.module('ImperaApp.formsView', ['ui.router', 'imperaApi', 'ngTable','impera.services.backhaul'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('forms', {\n            url: \"/environment/:env/forms?form\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/formsView/formsViewBody.html\",\n                    controller: \"formsController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\nresv.directive('recordEditor', ['imperaService', 'dialogs','BackhaulTable','$rootScope', function(imperaService, dialogs,BackhaulTable,$rootScope) {\n    return {\n        restrict: 'E',\n        scope: {\n            env: '=',\n            type: '=',\n            highlight: '=?'\n        },\n        templateUrl: 'views/formsView/recordEditor.html',\n        link: function(scope, element) {\n\n            scope.cols = []\n            function load() {\n                if (scope.type != null) {\n                \n                    scope.tableParams = new BackhaulTable(scope,{\n                            page: 1, // show first page\n                            count: 50 // count per page\n                    }, function(params){\n                            return imperaService.getFullRecords(scope.env, scope.type).then(function(f){\n                                scope.allRecords = f;\n                                return f;\n                            })\n                            \n                        }\n                    )\n                    \n                    imperaService.getForm(scope.env, scope.type).then(\n                        function(form) {\n                            scope.selectedForm = form\n                            scope.cols.length = 0\n                            angular.forEach(form.fields,function(v,name){\n                                    var field = \"fields.\"+name\n                                    var filter = {};\n                                    filter[field] = 'text';\n                                    scope.cols.push({\n                                        title: name.replace('_',' '),\n                                        sortable: field,\n                                        filter: filter,\n                                        show: true,\n                                        field: name\n                                    }) \n                                }\n                            )\n                            scope.cols.sort(function(a, b) {\n                                 return a.field > b.field;\n                            });           \n                            scope.cols.push({\n                                        title: \"\",\n                                        show: true \n                                    }) \n                                  \n                        }\n                    )\n   \n                }\n            }\n\n            load();\n            scope.$watch(\"type\", load)\n           \n            \n            scope.getOptionsFor = function(s) {\n                return s.split(',')\n            }\n\n            var types = {\n                \"string\": \"text\",\n                \"number\": \"text\",\n                \"bool\": \"checkbox\"\n            }\n            \n            var defaultValues = {\n                \"string\": \"\",\n                \"number\": 0,\n                \"slider\": 0,\n                \"bool\": false\n            }\n\n            scope.getFormType = function(modeltype) {\n                if (modeltype in types) {\n                    return types[modeltype];\n                }\n                return \"text\"\n            }\n            \n            var defaultFor = function(modeltype,selectedForm,name) {\n                if (modeltype == \"number\" && selectedForm.field_options[name] && selectedForm.field_options[name][\"min\"]){\n                    var m = selectedForm.field_options[name].min\n                    if(m>0){\n                        return m;\n                    }\n                    return 0;\n                }\n                if (modeltype in defaultValues) {\n                    return defaultValues[modeltype];\n                }\n                return \"\"\n            }\n\n           \n            \n          \n    \n            scope.delete = function(rec){\n                var dlg = dialogs.confirm(\"Confirm delete\",\"Do you really want to delete the record \" + rec);\n\t\t        dlg.result.then(function(btn){\n\t\t\t        imperaService.deleteRecord(scope.env,rec.record_id).then(function(){$rootScope.$broadcast('refresh')});\n\t\t        })\n                \n            }\n    \n           \n            scope.addNew = function(selectedForm){\n                var field = {}\n                angular.forEach(selectedForm.fields,function(v,k){\n                    field[k]=defaultFor(v,selectedForm,k)\n                })\n                \n                var record = {fields:field,form_type:selectedForm.form_type,edit:true}\n                scope.edit(selectedForm,record)\n            }\n            \n            \n            scope.edit = function(form, record){\n                 dialogs.create('views/formsView/formDialog.html', 'formDialogController', {\n                        type:form,\n                        record:record\n                }, {}).result.then(function(){$rootScope.$broadcast('refresh')})\n            \n            }\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n        }\n    }\n}])\nresv.controller('formsController', ['$scope', 'imperaService', \"$stateParams\",function($scope, imperaService, $stateParams) {\n\n    $scope.state = $stateParams\n  \n\n    function load(){\n        imperaService.getForms($stateParams.env).then(function(forms){\n            $scope.forms=forms\n        })\n\n        imperaService.getUnkownsForEnv($stateParams.env).then(function(unknowns){\n            $scope.unknowns=unknowns.filter(function(unknown){return unknown.source=='form'}).map(function(unknown){\n                return unknown.metadata.form\n            })\n        })\n    }\n    \n    load()\n    \n    $scope.$on('refresh',load)\n    \n    $scope.selectForm = function(f){\n       $scope.sfi = f.type;\n    }\n    \n    \n   \n   \n}]);\n\nresv.controller('formDialogController', ['$scope', 'imperaService', \"$stateParams\",'$modalInstance','data',function($scope, imperaService, $stateParams,$modalInstance,data) {\n\n    $scope.state = $stateParams\n    \n    $scope.record = data.record;\n    $scope.form = data.type;\n    \n   \n    \n    \n    var types = {\n        \"string\": \"text\",\n        \"number\": \"text\",\n        \"bool\": \"checkbox\"\n    }\n    \n    \n    var createOptions = function(name,type,options){\n        var out = {\n            widget:getWidget(type,options)\n            };\n        if(options){\n           if(options['help']){\n                out['help']=options['help']\n           }\n           \n           if(out.widget == \"options\"){\n                 out['options'] = options['options'].split(',')          \n           }\n           \n           if(out.widget == \"slider\"){\n                 out['options'] = getSliderOptions(options)\n           }\n            \n        }\n        \n        return out;\n    }\n    \n     var getSliderOptions = function(opts) {\n        if(!opts){\n            return {};\n        }\n        var minv = parseInt(opts.min)\n        if(!minv){\n            minv = 0\n        }\n        var maxv = parseInt(opts.max)\n        if(!maxv){\n            maxv = 100\n        }\n        return {\n            from: minv,\n            to: maxv,\n            step: 1\n        };\n    }\n    \n    var getWidget = function(type,options){\n        if(options){\n            if(options['widget']){\n                return options['widget'];\n            }\n        }\n        \n        if (type in types) {\n            return types[type];\n        }\n        return \"text\"\n    }\n    \n    \n    $scope.fieldList = []\n    angular.forEach(data.type.fields,function(v,k){\n            \n            $scope.fieldList.push({\n                key:k,\n                value:v,\n                options: createOptions(k,v,data.type.field_options[k])\n                \n            })\n    })\n    $scope.fieldList.sort(function(a, b) {\n          return a.key > b.key;\n    });\n    \n    var save = function(rec){\n            if(!rec.record_id){\n                return imperaService.createRecord($stateParams.env,rec.form_type,rec.fields);\n            }else{\n                return imperaService.updateRecord($stateParams.env,rec.record_id,rec.fields);\n            }\n    }\n\n    $scope.submit = function(){\n        save($scope.record).then(function(f){\n    \t\t$modalInstance.close(f);\n    \t\t$scope.$destroy();        \n        })\n\t};\n\t\n\t$scope.close = function(){\n\t\t$modalInstance.close();\n\t\t$scope.$destroy();\n\t};\n    \n   \n   \n   \n}]);\n","'use strict';\n\n\n\nvar resv = angular.module('ImperaApp.graphView', ['ui.router', 'imperaApi','dialogs.main','ImperaApp.resourceDetail'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('graph', {\n            url: \"/environment/:env/version/:version/graph\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/graph/graph.html\",\n                    controller: \"graphController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\n\n\nresv.controller('graphController', ['$scope', 'imperaService', \"$stateParams\",\"dialogs\",\n            function($scope, imperaService, $stateParams,dialogs) {\n\t\t\n$scope.dryrun = function() {\n             imperaService.dryrun($stateParams.env,$stateParams.version).then(function(d){$rootScope.$broadcast('refresh')});\n            \n        }\n\nvar types = {\n    \"std::File\": \"\\ue022\",\n    \"std::Package\": \"\\ue139\",\n    \"std::Directory\": \"\\ue118\",\n    \"std::Service\": \"\\ue137\",\n    \"exec::Run\": \"\\ue162\",\n    \"vm::Host\": \"\\ue017\"\n}\n\nvar colors = {\n    \"deployed\": \"#5cb85c\",\n    \"ERROR\": \"#d9534f\",\n    \"WAITING\": \"#5bc0de\"\n}\n\nfunction getIconCode(type) {\n    var out = types[type]\n    if (out)\n        return out;\n    return \"?\";\n}\n\nfunction getColorCode(type) {\n    var out = colors[type]\n    if (out)\n        return out;\n    return \"#337ab7\";\n}\n        \n\n        $scope.resources = null\n    imperaService.getEnvironment($stateParams.env).then(function(d) {\n        $scope.env = d\n    });\n\n\n                $scope.state = $stateParams\n                var diagonal = d3.svg.diagonal()\n                var width = 2000,\n                    height = 2000,\n                    node,\n                    link,\n                    root;\n\n                var maxFreedom = 400;\n                var levelspacing = 300;\n                var linkDistance = 280;\n\t\tvar cutoff = 0.08\n\n                var force = d3.layout.force()\n                    .on(\"tick\", tick)\n                    .charge(function(d) {\n                        return -600;\n                    })\n                    .linkDistance(function(d) {\n                        var bd = Math.abs(linkDistance * (d.target.depth - d.source.depth))\n                        return bd;\n                    })\n                    .size([width, height]);\n\n\t\tvar zoom = d3.behavior.zoom().size([width,height]).on(\"zoom\", zoom)\n\n                var vis = d3.select(\"#chart\").append(\"svg\")\n                    .attr(\"width\", \"100%\")\n                    .attr(\"height\", \"2000px\")\n\t\t    .append(\"g\")\n\t\t\t    \n\t\t zoom(d3.select(\"#chart\"))\n                 \n               function zoom() {\n\t\t  vis.attr(\"transform\", \"translate(\" + d3.event.translate + \")scale(\" + d3.event.scale + \t\t\t\")\");\n\t        }\n        zoom.translate([0,-(height-window.innerHeight)*0.5])\n        zoom.event(d3.select(\"#chart\"))\n\n                imperaService.getResources($stateParams.env, $stateParams.version).then(function(json) {\n                    var idcounter = 0;\n                    var idx = {}\n                    var midx = {}\n\n                    var nodes = [];\n                    var links = [];\n\n                    //make nodes and node index\n                    json.resources.forEach(function(n) {\n                        var node = {\n                            name: n.id,\n                            req: n.fields.requires,\n                            parents: [],\n                            children: [],\n                            id: idcounter++,\n                            sname: n.id_fields.attribute_value.substring(0, 25),\n                            icon: getIconCode(n.id_fields.entity_type),\n                            agent: n.id_fields.agent_name,\n                            source: n,\n                            color: getColorCode(n.status)\n                        }\n                        nodes.push(node)\n                        idx[n.id] = node\n                        if (n.id_fields.entity_type == \"vm::Host\") {\n                            midx[n.id_fields.attribute_value] = node\n                        }\n                    });\n\n                    // make links and cross link nodes\n                    nodes.forEach(function(n) {\n                        n.req.forEach(function(id) {\n                            n.parents.push(idx[id])\n                            idx[id].children.push(n);\n                            links.push({\n                                target: n,\n                                source: idx[id],\n                                id: idcounter++\n                            })\n                        });\n                        var h = midx[n.agent];\n                        if (h) {\n                            n.parents.push(h)\n                            h.children.push(n);\n                            links.push({\n                                target: n,\n                                source: h,\n                                id: idcounter++,\n                                toHost: true\n                            })\n                        }\n                    });\n                    update(nodes, links);\n                });\n\n                function update(nodes, links) {\n                    flatten(nodes, links);\n\n\n                    // make sure we set .px/.py as well as node.fixed will use those .px/.py to 'stick' the node to:\n                    if (!root.px) {\n                        // root have not be set / dragged / moved: set initial root position\n                        root.px = root.x = width / 2;\n                        root.py = root.y = circle_radius(root) + 2;\n                    }\n\n                    // Restart the force layout.\n                    force\n                        .nodes(nodes)\n                        .links(links)\n                        .start();\n\n                    //nodes = cluster.nodes(root);\n\n                    // Update the links…\n                    link = vis.selectAll(\"line.link\")\n                        .data(links.filter(function(l) {\n                            return !l.toHost || l.target.depth < 3;\n                        }), function(d) {\n                            return d.id;\n                        });\n\n                    // Enter any new links.\n                    link.enter().append(\"path\")\n                        .attr(\"class\", \"link\")\n                        .attr(\"d\", diagonal);\n                    // Exit any old links.\n                    link.exit().remove();\n\n                    // Update the nodes…\n                    node = vis.selectAll(\"g.node\").data(nodes, function(d) {\n                        return d.id;\n                    })\n\n                    var neg = node.enter().append(\"g\")\n                        .attr(\"class\", \"node\")\n                        .attr(\"transform\", function(d) {\n                            return \"translate(\" + d.y + \",\" + d.x + \")\";\n                        })\n                    neg.on(\"click\", click)\n                        .call(force.drag);\n                    neg.on(\"mousedown\", function(d) { //drag has priority on zoom\n                                                       d3.event.stopPropagation();});\n\n                    neg.append(\"text\")\n                        .attr(\"dx\", function(d) {\n                            return d.children ? -8 : 8;\n                        })\n                        .attr(\"dy\", 3)\n                        .style(\"text-anchor\", function(d) {\n                            return d.children ? \"end\" : \"start\";\n                        })\n                        .text(function(d) {\n                            return d.sname;\n                        });\n\n                    neg.append('text')\n                        .attr('text-anchor', 'middle')\n                        .attr('dominant-baseline', 'central')\n                        .attr('font-family', 'Glyphicons Halflings')\n                        .attr('font-size', function(d) {\n                            return '1em'\n                        })\n                        .attr('fill', function(d) {\n                            return d.color\n                        })\n                        .text(function(d) {\n                            return d.icon;\n                        });\n\n                    node.transition()\n                        .attr(\"transform\", function(d) {\n                            return \"translate(\" + d.x + \",\" + d.y + \")\";\n                        })\n\n\n\n                    // Exit any old nodes.\n                    node.exit().remove();\n                }\n\n                function tick(e) {\n\n                    var alpha = e.alpha;\n\n                    // max distance away from line\n                    // alpha always > 0.005 \n                    // compensate to get lines\n                    var freedom = Math.max((e.alpha - cutoff) * maxFreedom, 0);\n\t\t    //console.log(e.alpha,freedom)\n                    force.nodes().forEach(function(d) {\n\n                        if (!d.fixed) {\n                            var r = circle_radius(d) + 4,\n                                dl;\n\n                            // #1.0: hierarchy: same level nodes have to remain with a 1 LY band vertically:\n                            if (d.children) {\n                                //itended X position\n                                var pl =  d.depth * levelspacing + r;\n\n                                //distance away\n                                var delta = pl - d.x;\n\n                                //if too far, correct\n                                if (Math.abs(delta) > freedom) {\n                                    d.x = pl\n                                }\n                            }\n                        }\n                    });\n\n                    //redraw\n                    link.attr(\"d\", diagonal);\n                    node.attr(\"transform\", function(d) {\n                        return \"translate(\" + d.x + \",\" + d.y + \")\";\n                    })\n\n                }\n\n                // Color leaf nodes orange, and packages white or blue.\n                function color(d) {\n                    return d.color;\n                }\n\n                function circle_radius(d) {\n                    return d.children ? 4.5 : Math.sqrt(d.size) / 10;\n                }\n\n                // Toggle children on click.\n                function click(d) {\n                    if (d3.event.defaultPrevented) return;\n                    dialogs.create('views/resourceDetail/resourceDetail.html','resourceDetailCtrl',{resource: d.source,env:$stateParams.env},{})\n                }\n\n                // Assign one parent to each node\n                // Also assign each node a reasonable starting x/y position: we can do better than random placement since we're force-layout-ing a hierarchy!\n                function flatten(nodes, links) {\n                    var \n                        max_width=0, max_depth = 1;\n\n                    //get depth of node  (longest chain of parents)\n                    function getDepth(node) {\n                        if (node.depth) {\n                            return node.depth;\n                        }\n                        var order = Math.max.apply(null, node.parents.map(getDepth));\n                        order = Math.max(order, 0) + 1;\n                        node.depth = order;\n                        return order;\n                    }\n\n                    //get weight of node  (recursive total nr of children)\n                    function getWeight(node) {\n                        if (node.weight) {\n                            return node.weight;\n                        }\n                        var order = node.children.map(getWeight).reduce(function(a, b) {\n                            return a + b;\n                        }, 0) + 1;\n                        node.weight = order;\n                        return order;\n                    }\n\n                    nodes.forEach(getDepth);\n                    nodes.forEach(getWeight);\n\n\n                    //create root node, above all depth 0 nodes\n                    root = {\n                        name: \"root\",\n                        parents: [],\n                        children: [],\n                        depth: 0,\n                        parent: null\n                    };\n                    root.fixed = true;\n                    root.px = root.py = 0;\n\n                    nodes.forEach(function(n) {\n                        if (n.depth == 1) {\n                            root.children.push(n);\n                            n.parents.push(root);\n                        }\n                    });\n\n                    //determine initial placement in grid\n\n                    function recurse(node, x) {\n\t\t\tmax_width = Math.max(max_width, x);\n                        if (node.children) {\n//sort by weight, so the most important nodes are placed first (to the top) in the inital layout\n\t\t\t    node.children.sort(function(a, b) {\n                        \treturn b.weight - a.weight;\n                    \t    });\n                            max_depth = Math.max(max_depth, node.depth + 1);\n                            node.size = node.children.reduce(function(p, v, i) {\n                                return p + recurse(v, x + p);\n                            }, 1);\n                        }\n\n\n\n                        if (!node.x) {\n                            node.x = node.depth;\n                            node.y = x + node.size/2;\n                        }\n                        return node.size;\n                    }\n\n                    root.size = recurse(root, 0);\n\n                    // now correct/balance the x positions:\n                  \n                    \n                    var ky = (height - 20) / max_width;\n\n                  \n\n                    var kx = (width - 20) / max_depth;\n\n                   \n\t\t    var i\n                    for (i = nodes.length; --i >= 0;) {\n                        var node = nodes[i];\n                        if (!node.px) {\n                            node.y *= ky;\n                            node.y += 10 + ky / 2;\n                            node.x *= kx;\n                            node.x += 10 + kx / 2;\n                        }\n                    }\n\n                    return nodes;\n                }\n            }])\n","'use strict';\n\n\n\nvar resv = angular.module('ImperaApp.logsView', ['ui.router', 'imperaApi', 'ngTable','impera.services.backhaul'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('logs', {\n            url: \"/environment/:env/resource/:id?version\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/log/logBody.html\",\n                    controller: \"logController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\nresv.controller('logController', ['$scope', 'imperaService', \"$stateParams\", \"BackhaulTable\",\"$q\", function($scope, imperaService, $stateParams, BackhaulTable, $q) {\n    $stateParams.id = window.decodeURIComponent($stateParams.id)\n    $scope.state = $stateParams\n    $scope.cmversion= $stateParams.id.substring($stateParams.id.lastIndexOf(\"=\")+1)\n    $stateParams.version=$scope.cmversion\n\n    $scope.tableParams = new BackhaulTable($scope,{\n        page: 1, // show first page\n        count: 10, // count per page\n        sorting: {\n            'timestamp': 'desc' // initial sorting\n        }\n    },function(prms){\n            return imperaService.getLogForResource($stateParams.env,$stateParams.id).then(function(info) {\n                var data = info.logs\n                $scope.resource = info.resource\n                               \n                return data;\n\n            });\n\n    });\n   \n    imperaService.getEnvironment($stateParams.env).then(function(d) {\n        $scope.env = d\n    });\n\n  \n\n     $scope.names = function() {\n       var def = $q.defer()\n       var names = [\n            {\n                'id':  \"fact\",\n                'title': \"fact\"\n            },{\n                'id':  \"user\",\n                'title': \"user\"\n            },{\n                'id':  \"plugin\",\n                'title': \"plugin\"\n            }]\n                  \n\n            \n       def.resolve(names);\n       return def;\n        };\n\n      $scope.tf = function() {\n       var def = $q.defer()\n       var names = [\n            {\n                'id':  \"true\",\n                'title': \"expired\"\n            },{\n                'id':  \"false\",\n                'title': \"not expired\"\n            }]\n                  \n\n            \n       def.resolve(names);\n       return def;\n        };\n}]);\n","'use strict';\n\n\n\nvar resv = angular.module('ImperaApp.parametersView', ['ui.router', 'imperaApi', 'ngTable'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('params', {\n            url: \"/parameters/:env\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/parameters/parametersBody.html\",\n                    controller: \"paramsController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\nresv.controller('paramsController', ['$scope', 'imperaService', \"$stateParams\", \"BackhaulTable\",\"$q\", function($scope, imperaService, $stateParams, BackhaulTable, $q) {\n\n    $scope.state = $stateParams\n\n    $scope.tableParams = new BackhaulTable($scope,{\n        page: 1, // show first page\n        count: 10, // count per page\n        sorting: {\n            'id_fields.entity_type': 'asc' // initial sorting\n        }\n    }, function(params){\n           return imperaService.getParameters($stateParams.env).then(function(info) {\n                var data = info.parameters\n                $scope.expire = info.expire\n                var timeInMs = Date.now();\n                $scope.servertime = info.now\n                $scope.drift = info.now-timeInMs;\n                \n                data.forEach( function(d){\n                    d.expired = d.updated.getTime()+($scope.expire*1000)<$scope.servertime.getTime()\n                  \n                })\n                \n                return data;\n\n            });\n\n    });\n    $scope.resources = null\n    imperaService.getEnvironment($stateParams.env).then(function(d) {\n        $scope.env = d\n    });\n\n    $scope.getRecord = function(param){\n        return { 'in':param,\n                  'show':false,\n                  'value':''\n                } \n    }\n\n    $scope.getValue = function(param){\n       imperaService.getParameter($scope.state.env,param.in.name,param.in.resource_id).then(function(d){\n           param.out = d;\n           param.value = d.value;\n           param.show = true\n        })\n    }\n\n     $scope.names = function() {\n       var def = $q.defer()\n       var names = [\n            {\n                'id':  \"fact\",\n                'title': \"fact\"\n            },{\n                'id':  \"user\",\n                'title': \"user\"\n            },{\n                'id':  \"plugin\",\n                'title': \"plugin\"\n            },{\n                'id':  \"report\",\n                'title': \"report\"\n            }]\n                  \n\n            \n       def.resolve(names);\n       return def;\n        };\n\n      $scope.tf = function() {\n       var def = $q.defer()\n       var names = [\n            {\n                'id':  \"true\",\n                'title': \"expired\"\n            },{\n                'id':  \"false\",\n                'title': \"not expired\"\n            }]\n                  \n\n            \n       def.resolve(names);\n       return def;\n        };\n}]);\n","'use strict';\n\nvar module = angular.module('ImperaApp.portalView', ['ui.router', 'imperaApi'])\n\nmodule.config(['$stateProvider', function($stateProvider) {\n    $stateProvider\n        .state('portal', {\n            url: \"/environment/:env/portal\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/portal/portalBody.html\",\n                    controller: \"PortalController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n                }\n            }\n\n        })\n}]);\n\nmodule.controller('PortalController', ['$scope','$rootScope', 'imperaService', '$stateParams','$state','dialogs', function($scope,$rootScope, imperaService, $stateParams, $state, dialogs) {\n    $scope.state = $stateParams\n    \n    imperaService.getEnvironment($stateParams.env).then(function(d) {\n        $scope.env = d\n    });\n    \n    \n    var getReport = function(){\n        imperaService.getReportParameters($stateParams.env).then(function(d) {\n            $scope.report = d\n        });\n    }\n    \n    $scope.$on('refresh',getReport)\n    getReport()\n    \n    \n    var alertForUnknown = function(){\n   \n        imperaService.getUnkownsForEnv($stateParams.env).then(function(unknowns){\n            var unknowns = unknowns.filter(function(unknown){return unknown.source=='form'})\n            var out = {}\n            unknowns.forEach(function (unknown){out[unknown.metadata.form]=unknown})\n            $scope.unknowns = Object.keys(out).map(function(key){\n                return out[key]\n            })\n        })\n    \n    }  \n  \n    $scope.$on('refresh',alertForUnknown)\n    alertForUnknown()\n    \n    \n    var getVersionsHelper = function(range){\n        imperaService.getVersionsPaged($stateParams.env, 0, range).then(\n            function(d){\n                var total = d.count\n\n                var deployed\n                var newv\n                var state = 0;\n                // 0 -> scanning for first, no deployed\n                // 1 -> scanning for fist deployed\n                // break -> found first deployed\n                \n                for(var i in d.versions){\n                    var v = d.versions[i]\n                    if(state == 0){\n                        if(v.deployed){\n                            deployed = v\n                            break\n                        }else{\n                            newv = v\n                            state = 1\n                        }\n                    }else{\n                        //state 1\n                        //scanning for fist deployed\n                        if(v.deployed){\n                            deployed = v\n                            break\n                        }\n                    }\n                }\n               \n               \n                if(state==1 &&  range<total){\n                    getVersionsHelper(range*2)\n                }\n                \n                $scope.newVersion = newv;\n                $scope.lastVersion = deployed;\n               \n            })\n    }\n    \n    var getVersions = function(){\n        getVersionsHelper(10);\n    }\n    \n    $scope.$on('refresh',getVersions)\n    getVersions()\n    \n     $scope.startDryRun = function(res) {\n            var resVersion = res.version \n            imperaService.dryrun($stateParams.env,resVersion).then(function(d){\n                $rootScope.$broadcast('refresh')\n            });     \n    }\n\n    $scope.deploy = function(res) {\n        var resVersion = res.version \n        imperaService.deploy($stateParams.env,resVersion,true).then(function(d){$rootScope.$broadcast('refresh')});          \n    }\n   \n}])\n","'use strict';\n\nvar resv = angular.module('ImperaApp.projectView', ['ui.router', 'imperaApi', 'ngTable','impera.services.backhaul'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('project', {\n            url: \"/project/:project\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/project/projectBody.html\",\n                    controller: \"projectviewController\"\n                },\n                \"side\": {\n                    templateUrl: \"partials/emptysidebar.html\"\n\n                }\n            }\n\n        })\n}]);\n\n\n\nresv.controller('projectviewController', ['$scope', 'imperaService', \"$stateParams\", \"BackhaulTable\", \"$q\",'dialogs','$rootScope',\n    function($scope, imperaService, $stateParams, BackhaulTable,$q,dialogs,$rootScope) {\n        \n        $scope.state = $stateParams\n\n        $scope.tableParams = new BackhaulTable($scope,{\n            page: 1, // show first page\n            count: 10, // count per page\n            sorting: {\n                'name': 'asc' // initial sorting\n            }\n        }, function(params){\n                    return imperaService.getEnvironmentsByProject($stateParams.project)\n           }\n        );\n\n\t$scope.deleteEnv = function(env){\n\t\tvar dlg = dialogs.confirm(\"Confirm delete\",\"Do you really want to delete the environment \" + env.name);\n\t\tdlg.result.then(function(btn){\n\t\t\timperaService.removeEnvironment(env.id).then( function(){$rootScope.$broadcast('refresh');});\n\t\t})\n\t}  \t\n\n}]);\n","'use strict';\n\nvar resv = angular.module('ImperaApp.projectsView', ['ui.router', 'imperaApi', 'ngTable','impera.services.backhaul'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('projects', {\n            url: \"/projects\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/projects/projectBody.html\",\n                    controller: \"projectsviewController\"\n                },\n                \"side\": {\n                    templateUrl: \"partials/emptysidebar.html\"\n\n                }\n            }\n\n        })\n}]);\n\n\n\nresv.controller('projectsviewController', ['$scope', 'imperaService', '$rootScope', \"$stateParams\", \"BackhaulTable\", \"$q\",'dialogs',\n    function($scope, imperaService,$rootScope, $stateParams, BackhaulTable,$q, dialogs) {\n        \n        $scope.state = $stateParams\n\n        $scope.tableParams = new BackhaulTable($scope,{\n            page: 1, // show first page\n            count: 10, // count per page\n            sorting: {\n                'name': 'asc' // initial sorting\n            }\n        }, function(params){\n                    return imperaService.getProjects()\n           }\n        );\n        \n        \n        $scope.deleteProject = function(project){\n            var dlg = dialogs.confirm(\"Confirm delete\",\"Do you really want to delete the project \" + project.name);\n\t\t    dlg.result.then(function(btn){\n\t\t\t    imperaService.removeProject(project.id).then( function(){$rootScope.$broadcast('refresh');});\n\t\t    })\n            \n        }\n\n    }\n\n    \n]);\n","'use strict';\n\n\n\nvar resv = angular.module('ImperaApp.reportView', ['ui.router', 'imperaApi', 'ngTable','dialogs.main','ImperaApp.diffDetail'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('report', {\n            url: \"/environment/:env/version/:version/report?id\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/report/reportBody.html\",\n                    controller: \"reportController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\n\n\nresv.controller('reportController', ['$scope', 'imperaService', \"$stateParams\",\"dialogs\",\"BackhaulTable\",\"$q\",\"$rootScope\",\n    function($scope, imperaService, $stateParams,dialogs,BackhaulTable, $q, $rootScope) {\n        \n\n        $scope.state = $stateParams\n        \n        $scope.tableParams = new BackhaulTable($scope,{\n            page: 1, // show first page\n            count: 50 // count per page,\n        }, function(params){\n           if(! $stateParams.id){\n                var out = $q.defer()\n                out.resolve([])\n                return out.promise\n           }else{          \n               return imperaService.getDryrun($stateParams.env,$scope.state.id).then(function(d) {\n                    $scope.dryrun=d\n                    var out=[]\n                    for(var k in d.resources){\n                        var res = angular.copy(d.resources[k])\n                        res[\"id\"] = k\n                        res[\"changessize\"] = Object.keys(res.changes).length\n                        out.push(res)\n                    }\n                    return out;\n                });\n           }\n\n        });\n    \n        $scope.$watch(\"dryrun.id\",function(){\n            if($scope.dryrun.id){\n                $scope.state.id = $scope.dryrun.id\n                $scope.tableParams.refresh()\n            }\n        },true)\n        \n        function loadList(){\n        imperaService.getDryruns($stateParams.env,$stateParams.version).then(function(d) {\n            d.reverse()\n            $scope.dryruns = d\n            if(!$scope.state.id && d.length>0){\n                $scope.state.id = d[0].id\n                $scope.tableParams.refresh()\n            }\n        });\n        }\n        loadList();\n        $scope.$on('refresh',loadList)\n\n        imperaService.getEnvironment($stateParams.env).then(function(d) {\n            $scope.env = d\n        });\n\n\n        $scope.open = function(d,id) {\n      \n            dialogs.create('views/diffDetail/diffDetail.html', 'diffDetailCtrl', {\n                diff:d,\n                id:id\n            }, {})\n       \n\t\t\n\n        }\n\n        $scope.dryrun = function() {\n             imperaService.dryrun($stateParams.env,$stateParams.version).then(function(d){$rootScope.$broadcast('refresh')});\n            \n        }\n        \n        $scope.details = function(item) {\n            imperaService.getResource($stateParams.env,item.id).then(function(d){\n                dialogs.create('views/resourceDetail/resourceDetail.html', 'resourceDetailCtrl', {\n                    resource: d,\n                    env:$stateParams.env\n                }, {})\n\n            })\n\n        }\n    \n    }\n\n    \n]);\n","'use strict';\n\n\n\nvar resv = angular.module('ImperaApp.resourceView', ['ui.router', 'imperaApi', 'ngTable', 'dialogs.main', 'ImperaApp.resourceDetail','ImperaApp.fileDetail','impera.services.backhaul'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('resources', {\n            url: \"/environment/:env/version/:version\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/resource/resourceBody.html\",\n                    controller: \"resourceController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\nresv.controller('resourceButtonController',['$scope','$rootScope', 'imperaService', \"$stateParams\",\n    function($scope, $rootScope, imperaService, $stateParams) {\n         $scope.dryrun = function() {\n            imperaService.dryrun($stateParams.env,$stateParams.version).then(function(d){\n                $scope.dryrunid=d.id\n                $rootScope.$broadcast('refresh')\n            });     \n        }\n        \n        $scope.deploy = function() {\n            imperaService.deploy($stateParams.env,$stateParams.version,true).then(function(d){$rootScope.$broadcast('refresh')});\n          \n        }\n    }\n])\n    \n\nresv.controller('resourceController', ['$scope','$rootScope', 'imperaService', \"$stateParams\", \"BackhaulTable\", \"dialogs\",\"$q\",\n    function($scope, $rootScope, imperaService, $stateParams, BackhaulTable, dialogs,$q) {\n        \n        $scope.state = $stateParams\n        $scope.toHighlight = null\n        $scope.highlight = function(name) {\n            if ($scope.toHighlight == name) {\n                $scope.toHighlight = null\n            } else\n                $scope.toHighlight = name\n        }\n\n\n        $scope.deploy = function() {\n            imperaService.deploy($stateParams.env,$stateParams.version,true).then(function(d){$rootScope.$broadcast('refresh')});\n          \n        }\n      \n\n        $scope.tableParams = new BackhaulTable($scope,{\n            page: 1, // show first page\n            count: 10, // count per page\n            sorting: {\n                'id_fields.entity_type': 'asc' // initial sorting\n            }\n        }, function(params){\n                    return imperaService.getResources($stateParams.env, $stateParams.version).then(function(info) {\n\n                    $scope.status = info.model\n                    \n\n                    var data = info.resources\n                    $scope.alldata = {}\n                    angular.forEach(data, function(item) {\n                        $scope.alldata[item.id] = item\n                    })\n                    angular.forEach(data, function(item) {\n                        $scope.deporder(item)\n                    })\n                    \n                    return data;\n\n                })\n        });\n        $scope.resources = null\n\n\n        $scope.deporderInt = function(id) {\n            if (!$scope.alldata[id]) {\n                var order = Math.max.apply(null, $scope.alldata[id].fields.requires.map($scope.deporderInt));\n                order = Math.max(order, 0) + 1;\n                $scope.alldata[id].deporderv = order;\n                return order;\n            }\n            return $scope.alldata[id].deporderv;\n        }\n\n        $scope.deporder = function(item) {\n            var out = $scope.deporderInt(item.id);\n            item.deporder = out;\n            return out;\n        }\n\n        $scope.details = function(item) {\n            dialogs.create('views/resourceDetail/resourceDetail.html', 'resourceDetailCtrl', {\n                resource: item,\n                env:$stateParams.env\n            }, {})\n\n        }\n\n        $scope.open = function(item) {\n            dialogs.create('views/fileDetail/fileDetail.html', 'fileDetailCtrl', {\n                resource: item,\n                env:$stateParams.env\n            }, {})\n\n        }\n       $scope.states = function() {\n        var def = $q.defer()\n        var names = [\n            {\n                'id':  \"skipped\",\n                'title': \"skipped\"\n            },{\n                'id':  \"deployed\",\n                'title': \"deployed\"\n            },{\n                'id':  \"failed\",\n                'title': \"failed\"\n            },{\n                'id':  \"!*\",\n                'title': \"empty\"\n            }]\n                  \n\n            \n        def.resolve(names);\n        return def;\n      };\n\n\n      $scope.setsort = function(name){\n        \n        $scope.tableParams.filter()['status']=name\n      }\n\n\n        $scope.resources = null\n    imperaService.getEnvironment($stateParams.env).then(function(d) {\n        $scope.env = d\n    });\n\n    }\n\n    \n]);\n","'use strict';\n\nvar rscdet = angular.module('ImperaApp.resourceDetail', ['imperaApi','dialogs.main'])\n\nrscdet.controller('resourceDetailCtrl',['$scope','$modalInstance','data',\"dialogs\",function($scope,$modalInstance,data,dialogs){\n\t//-- Variables -----//\n\n\t$scope.header = \"Details for \" + data.resource.id ;\n    $scope.env=data.env\n   \n\n    $scope.keys = Object.keys(data.resource.fields)\n    $scope.data = data.resource\n\n\t$scope.icon = 'glyphicon glyphicon-info-sign';\n\n\t//-- Methods -----//\n\t\n\t$scope.close = function(){\n\t\t$modalInstance.close();\n\t\t$scope.$destroy();\n\t}; // end close\n\n\n    $scope.open = function() {\n         $modalInstance.close();\n            dialogs.create('views/fileDetail/fileDetail.html', 'fileDetailCtrl', {\n                resource: $scope.data\n            }, {})\n       \n\t\t$scope.$destroy();\n\n    }\n}]); // end WaitDialogCtrl\n","'use strict';\n\nvar resv = angular.module('ImperaApp.restoreView', ['ui.router', 'imperaApi', 'ngTable','impera.services.backhaul','ImperaApp.inputDialog'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('restores', {\n            url: \"/environment/:env/restore\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/restores/restoreBody.html\",\n                    controller: \"restoreController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\nresv.controller('restoreDialogCtrl',['$scope','$modalInstance','data','$stateParams','imperaService',\n        function($scope,$modalInstance,data,$stateParams,imperaService) {\n\t//-- Variables -----//\n   imperaService.getEnvironmentsWithProject().then(function(f){\n        $scope.envs = f\n   });\n   \n   \n   imperaService.getSnapshots($stateParams.env).then(function(f){\n        $scope.snapshots = f\n   });\n\n\t//-- Methods -----//\n\t\n\t$scope.done = function() {\n\t    imperaService.restoreSnapshot($scope.env.id,$scope.snapshot.id).then(function(d){$modalInstance.close(d);});\n\t    \n\t}\n\t\n\t$scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}]);\n\n\nresv.controller('restoreController', ['$scope', '$rootScope', 'imperaService', \"$stateParams\", \"BackhaulTable\",\"dialogs\",\n    function($scope, $rootScope, imperaService, $stateParams, BackhaulTable,dialogs ) {\n       $scope.state = $stateParams\n       $scope.tableParams = new BackhaulTable($scope,{\n            page: 1, // show first page\n            count: 10,\n            sorting: {\n                'started': 'desc' // initial sorting\n            }\n        }, function(params){\n                    return  imperaService.getEnrichedRestores($stateParams.env)\n        });\n        \n       $scope.deleteRestore = function(id){\n            var dlg = dialogs.confirm(\"Confirm delete\",\"Do you really want to delete the restore \" + id);\n\t\t    dlg.result.then(function(btn){\n                imperaService.deleteRestore($stateParams.env,id).then( function(){$rootScope.$broadcast('refresh');});\n\t        })  \n       }\n\n       $scope.startRestore = function(id){\n            dialogs.create('views/restores/restoreForm.html', 'restoreDialogCtrl', {\n              \n            }, {}).result.then(function(){$rootScope.$broadcast('refresh');})\n       }\n      \n    }\n\n    \n]);\n","'use strict';\n\nvar resv = angular.module('ImperaApp.snapshotDetailView', ['ui.router', 'imperaApi', 'ngTable','impera.services.backhaul','ImperaApp.inputDialog'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('snapshot', {\n            url: \"/environment/:env/snapshot/:id\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/snapshotDetail/snapshotDetailBody.html\",\n                    controller: \"snapshotDetailController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\nresv.controller('snapshotDetailController', ['$scope', '$rootScope', 'imperaService', \"$stateParams\", \"BackhaulTable\",\"dialogs\",\n    function($scope, $rootScope, imperaService, $stateParams, BackhaulTable,dialogs ) {\n       $scope.state = $stateParams\n       $scope.tableParams = new BackhaulTable($scope,{\n            page: 1, // show first page\n            count: 10\n        }, function(params){\n                    return imperaService.getSnapshot($stateParams.env,$stateParams.id).then(function (sn){\n                        $scope.sn = sn\n                        return sn.resources\n                    })\n        });\n        \n      \n       $scope.download = function(hash){\n            imperaService.downloadFile(hash);\n       }\n    }\n\n    \n]);\n","'use strict';\n\nvar resv = angular.module('ImperaApp.snapshotView', ['ui.router', 'imperaApi', 'ngTable','impera.services.backhaul','ImperaApp.inputDialog'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('snapshots', {\n            url: \"/environment/:env/snapshot\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/snapshots/snapshotBody.html\",\n                    controller: \"snapshotController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\nresv.controller('snapshotController', ['$scope', '$rootScope', 'imperaService', \"$stateParams\", \"BackhaulTable\",\"dialogs\",\n    function($scope, $rootScope, imperaService, $stateParams, BackhaulTable,dialogs ) {\n       $scope.state = $stateParams\n       $scope.tableParams = new BackhaulTable($scope,{\n            page: 1, // show first page\n            count: 10,\n            sorting: {\n                'started': 'desc' // initial sorting\n            }\n        }, function(params){\n                    return  imperaService.getSnapshots($stateParams.env)\n        });\n        \n       $scope.deleteSnapshot = function(id){\n                 imperaService.deleteSnapshot($stateParams.env,id).then( function(){$rootScope.$broadcast('refresh');});\n       }\n\n       $scope.restoreSnapshot =  function(env, id){\n                 imperaService.restoreSnapshot(env,id)\n       }\n\n       $scope.createSnapshot = function(id){\n                // \n            dialogs.create('partials/input/inputDialog.html', 'inputDialogCtrl', {\n                header: \"Snapshot name\",\n                content:\"Name for the snapshot\"\n            }, {}).result.then(function(name){\n                imperaService.createSnapshot($stateParams.env,name).then( function(){$rootScope.$broadcast('refresh');});\n            })\n       }\n    }\n\n    \n]);\n","angular.module('ImperaApp').run(['$templateCache', function($templateCache) {\n  'use strict';\n\n  $templateCache.put('partials/directives/breadcrumb.html',\n    \"<ol class=\\\"col-md-12 breadcrumb\\\"><li ng-repeat=\\\"item in breadcrumb\\\" ng-class=\\\"{'active':item.last}\\\"><a ng-if=\\\"!item.id && item.sref\\\" ui-sref={{item.sref}}>{{item.name}}</a> <span ng-if=\\\"!item.id && !item.sref\\\">{{item.name}}</span> <span ng-if=\\\"item.id && !item.last\\\">{{item.name}}: <a ui-sref={{item.sref}}>{{item.id}}</a></span> <span ng-if=\\\"item.id && item.last\\\">{{item.name}}: {{item.id}}</span></li></ol>\"\n  );\n\n\n  $templateCache.put('partials/directives/deployProgress.html',\n    \"<div ng-if=name class=row><div class=col-md-1><strong>{{name}}:</strong></div><div class=col-md-{{width}}><progress><bar ng-repeat=\\\"bar in data.bars\\\" ng-click=action(bar.name) value=bar.value type={{bar.type}}><span>{{bar.name}} {{bar.label}}</span></bar><div ng-if=\\\"data.bars.length==0 && emptyaction\\\" style=\\\"width: 100%; text-align: center; cursor:pointer\\\" ng-click=emptyaction()><span class=\\\"glyphicon glyphicon-play\\\" aria-hidden=true></span> {{emptyname}}</div></progress></div><div class=col-md-1>total: {{data.total}}</div><div ng-if=remainder class=col-md-{{remainder}}><ng-transclude></ng-transclude></div></div><div ng-if=!name class=row><div class=col-md-8><progress class=compact><bar ng-repeat=\\\"bar in data.bars\\\" ng-click=action(bar.name) value=bar.value type={{bar.type}}><span></span></bar></progress></div><div class=col-md-4>{{data.done}} / {{data.total}}</div></div>\"\n  );\n\n\n  $templateCache.put('partials/emptyFilter.html',\n    \"<label class=radio-inline><input type=checkbox ng-disabled=$filterRow.disabled ng-model=params.filter()[name] ng-true-value=\\\"'!0'\\\" ng-false-value=\\\"''\\\"> <strong>Has Changes</strong></label>\"\n  );\n\n\n  $templateCache.put('partials/emptysidebar.html',\n    \"<div class=row><div class=\\\"col-md-2 sidebar\\\"><div class=row style=\\\"position:absolute; bottom:55px\\\" ng-controller=configCtrl><div class=col-xs-3><button type=button class=\\\"btn btn-default\\\" ng-click=openFeedback(null) data-toggle=tooltip data-placement=top title=\\\"Give feedback\\\"><span class=\\\"glyphicon glyphicon-thumbs-up\\\"></span> / <span class=\\\"glyphicon glyphicon-thumbs-down\\\"></span></button></div><div class=col-xs-9><h5 class=text-right>{{config.backend}}</h5></div></div></div></div>\"\n  );\n\n\n  $templateCache.put('partials/input/inputDialog.html',\n    \"<div class=\\\"modal-header dialog-header-confirm\\\"><h4 class=modal-title><span class={{icon}}></span> {{header}}</h4></div><div class=modal-body><div class=input-group><input ng-model=result class=form-control placeholder=\\\"{{content}}\\\"></div></div><div class=modal-footer><button type=button class=\\\"btn btn-default\\\" ng-click=close() ng-disabled=!result>Create</button></div>\"\n  );\n\n\n  $templateCache.put('partials/projects/projects.html',\n    \"<ul class=\\\"nav navbar-nav\\\"><li dropdown><a id=simple-dropdown class=pull-right dropdown-toggle><small><span class=\\\"glyphicon glyphicon-th-list\\\"></span></small> <span>{{currentProject.name}} {{currentEnv.name}}</span> <span class=caret></span></a><ul class=dropdown-menu aria-labelledby=simple-dropdown><li ng-repeat=\\\"project in projects\\\"><a ui-sref=project({project:project.id})>{{project.name}}</a><ul><li ng-repeat=\\\"env in project.envs\\\"><a ui-sref=portal({env:env.id})>{{env.name}}</a></li></ul></li><li role=separator class=divider></li><li><a ui-sref=projects()>all projects</a></li></ul></li></ul>\"\n  );\n\n\n  $templateCache.put('partials/refresh/refresh.html',\n    \"<div ng-controller=refreshController><ul class=\\\"nav navbar-nav\\\"><li><a ng-click=timeSrv.refresh()><span class=\\\"glyphicon glyphicon-refresh\\\"></span></a></li><li dropdown><a dropdown-toggle><span class=\\\"glyphicon glyphicon-clock\\\"></span> <span ng-show=!refresh>Refresh Off</span> <span ng-show=refresh class=text-warning>refreshed every {{refresh}}</span></a><ul class=dropdown-menu><li ng-repeat=\\\"interval in refresh_intervals\\\" ng-class=\\\"{&quot;active&quot;:interval==refresh}\\\"><a ng-click=setRefresh(interval)>{{interval}}</a></li></ul></li></ul></div>\"\n  );\n\n\n  $templateCache.put('views/addEnv/addEnv.html',\n    \"<div class=row><div class=col-md-12><h2>Create a new Environment</h2></div></div><div class=row><div class=col-md-6><form name=userForm class=form-horizontal ng-submit=addEnv(selectedProject.id,name,repo,selectedTag) novalidate><p class=help-block>An Environment is a dedicated set of virtual resources, associated to a particular project. In an environment, an instance of the project can be deployed and executed in an isolated way, e.g. for development, testing and/or production purposes.</p><div class=form-group ng-class=\\\"{ 'has-error' : userForm.project.$invalid && !userForm.project.$pristine }\\\"><label for=inputProject class=\\\"col-sm-2 control-label\\\">Project</label><div class=col-sm-8><select name=project ng-options=\\\"item.name for item in projects track by item.id\\\" ng-model=selectedProject class=form-control id=inputProject required></select></div></div><div class=form-group ng-class=\\\"{ 'has-error' : userForm.name.$invalid && !userForm.name.$pristine }\\\"><label for=inputName class=\\\"col-sm-2 control-label\\\">Name</label><div class=col-sm-8><input name=name ng-model=name class=form-control id=inputName required></div></div><div class=form-group ng-class=\\\"{ 'has-error' : userForm.repo.$invalid && !userForm.repo.$pristine }\\\"><label for=inputRepo class=\\\"col-sm-2 control-label\\\">Repository</label><div class=col-sm-8><input name=repo ng-model=repo class=form-control id=inputRepo required></div></div><div class=form-group ng-class=\\\"{ 'has-error' : userForm.tag.$invalid && !userForm.tag.$pristine }\\\"><label for=inputTag class=\\\"col-sm-2 control-label\\\">Branch:</label><div class=col-sm-8><input name=branch ng-model=selectedTag class=form-control id=inputTag required></div></div><a ui-sref=projects><button class=\\\"btn btn-primary\\\">Cancel</button></a> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=userForm.$invalid>Create</button></form></div></div>\"\n  );\n\n\n  $templateCache.put('views/addProject/addProject.html',\n    \"<h2>Create a new Project</h2><form name=userForm class=form-horizontal ng-submit=addProject(name) novalidate><div class=form-group ng-class=\\\"{ 'has-error' : userForm.name.$invalid && !userForm.name.$pristine }\\\"><label for=inputName class=\\\"col-sm-2 control-label\\\">Name</label><div class=col-sm-4><input name=name ng-model=name class=form-control id=inputName required autofocus></div></div><button type=submit class=\\\"btn btn-primary\\\" ng-disabled=userForm.$invalid>Create</button></form>\"\n  );\n\n\n  $templateCache.put('views/agents/agentBody.html',\n    \"<div class=row><im-breadcrumb name=\\\"'Agents'\\\"></im-breadcrumb><div class=col-md-12><table class=\\\"table table-lined\\\" ng-table=tableParams show-filter=true><tr ng-repeat=\\\"agent in $data\\\" ng-class=\\\"{'warning':agent.expired}\\\"><td data-title=\\\"'Hostname'\\\" sortable filter=\\\"{ 'hostname':'text'}\\\">{{agent.hostname}}</td><td data-title=\\\"'Environment'\\\" sortable filter=\\\"{ 'environment':'select'}\\\" filter-data=names() ng-init=\\\"env=getEnv(agent.environment)\\\"><a ui-sref=envs({env:agent.environment})>{{env[0].name}}</a></td><td data-title=\\\"'Name'\\\" sortable filter=\\\"{ 'name':'text'}\\\">{{agent.name}}</td><td data-title=\\\"'Last seen'\\\" sortable filter=\\\"{ 'last_seen':'text'}\\\">{{agent.last_seen|date:'dd/MM/yyyy HH:mm'}}</td><td data-title=\\\"'Interval'\\\" sortable>{{agent.interval}}</td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/compileReport/compileBody.html',\n    \"<div class=row><im-breadcrumb name=\\\"'Compile Report'\\\"></im-breadcrumb></div><div class=row><div class=col-md-6><select class=form-control ng-model=compile ng-options=\\\"compile.started for compile in compiles track by compile.started\\\"></select></div></div><div class=row><div class=\\\"col-md-12 detail\\\"><p><strong>Started:</strong> {{compile.started|date:'dd/MM/yyyy HH:mm'}}</p><p><strong>Ended:</strong> {{compile.completed|date:'dd/MM/yyyy HH:mm'}}</p><p><strong>Time (s):</strong> {{(compile.completed-compile.started)/1000}}</p></div></div><div class=row><div class=col-md-12><table class=\\\"table table-lined\\\"><tr><th></th><th>Name</th><th>Command</th><th>Start (s)</th><th>Duration (s)</th><th>Return code</th></tr><tr ng-repeat-start=\\\"sub in compile.reports\\\" ng-class=\\\"{'warning':sub.returncode!=0}\\\"><td><i ng-click=\\\"sub.open=!sub.open\\\" class=\\\"pull-right glyphicon\\\" ng-class=\\\"{'glyphicon-chevron-down': sub.open, 'glyphicon-chevron-right': !sub.open}\\\"></i></td><td>{{sub.name}}</td><td>{{sub.command}}</td><td>+{{(sub.started-compile.started)/1000}}</td><td>{{(sub.completed-sub.started)/1000}}</td><td>{{sub.returncode}}</td></tr><tr ng-repeat-end class=\\\"accordian-body collapse\\\" collapse=!sub.open ng-class=\\\"{'warning':sub.returncode!=0}\\\"><td colspan=6><div class=detail><p><strong>Out stream:</strong><div hljs source=sub.outstream></div></p><p><strong>Error stream:</strong><div hljs source=sub.errstream></div></p></div></td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/deployReport/reportBody.html',\n    \"<div class=row><im-breadcrumb name=\\\"'Deploy Report'\\\"></im-breadcrumb><ng-include src=\\\"'views/resource/buttonBar.html'\\\"></ng-include></div><div class=row><div class=col-md-12><h1>Changes Deployed</h1></div><div class=col-md-12 style=min-height:150px ng-hide=\\\"tableParams.data.length != 0 || !tableParams.settings().$loading\\\"><span us-spinner=\\\"{radius:30, width:8, length: 16}\\\" style=\\\"text-align: center; padding-top: 25px\\\"></span></div><div class=col-md-12><table ng-table=tableParams ng-hide=\\\"tableParams.data.length == 0 && tableParams.settings().$loading\\\" class=\\\"table table-lined\\\" show-filter=true><tr ng-repeat=\\\"res in $data\\\"><td data-title=\\\"'type'\\\" sortable filter=\\\"{ 'id_fields.entity_type':'text'}\\\">{{res.id_fields.entity_type}}</td><td data-title=\\\"'agent'\\\" sortable filter=\\\"{ 'id_fields.agent_name':'text'}\\\">{{res.id_fields.agent_name}}</td><td data-title=\\\"'value'\\\" sortable filter=\\\"{ 'id_fields.attribute_value':'text'}\\\">{{res.id_fields.attribute_value}}</td><td data-title=\\\"'Time'\\\" sortable>{{res.action.timestamp|date:'dd/MM/yyyy HH:mm'}}</td><td data-title=\\\"'Level'\\\" sortable>{{res.action.level}}</td><td data-title=\\\"'Status'\\\" sortable>{{res.status}}</td><td data-title=\\\"'Data'\\\"><span ng-if=res.message style=\\\"word-wrap: break-word\\\">{{res.message}}</span><div ng-if=res.action.data ng-repeat=\\\"(prop,ft) in res.action.data\\\"><p ng-if=\\\"prop!='hash'\\\"><strong>{{prop}}:</strong> {{ft[0]}} <span class=\\\"glyphicon glyphicon-arrow-right\\\"></span> {{ft[1]}}</p><button ng-if=\\\"prop=='hash'\\\" class=\\\"btn btn-xs btn-default\\\" ng-click=open(ft,res.id)>Diff</button></div></td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/diffDetail/diffDetail.html',\n    \"<div class=\\\"modal-header dialog-header-confirm\\\"><h4 class=modal-title><span class={{icon}}></span> {{header}}</h4></div><div class=modal-body><div><div hljs source=\\\"content.join('')\\\"></div></div></div><div class=modal-footer><button type=button class=\\\"btn btn-default\\\" ng-click=close()>Close</button></div>\"\n  );\n\n\n  $templateCache.put('views/editEnv/editEnv.html',\n    \"<h2>Edit environment: {{env.name}}</h2><form name=userForm class=form-horizontal ng-submit=editEnv(selectedProject.id,name,repo,selectedTag) novalidate><div class=form-group ng-class=\\\"{ 'has-error' : userForm.project.$invalid && !userForm.project.$pristine }\\\"><label for=inputProject class=\\\"col-sm-2 control-label\\\">Project</label><div class=col-sm-4><label name=project class=form-control>{{selectedProject.name}}</label></div></div><div class=form-group ng-class=\\\"{ 'has-error' : userForm.name.$invalid && !userForm.name.$pristine }\\\"><label for=inputName class=\\\"col-sm-2 control-label\\\">Name</label><div class=col-sm-4><input name=name ng-model=name class=form-control id=inputName required></div></div><div class=form-group ng-class=\\\"{ 'has-error' : userForm.repo.$invalid && !userForm.repo.$pristine }\\\"><label for=inputRepo class=\\\"col-sm-2 control-label\\\">Repository</label><div class=col-sm-4><input name=repo ng-model=repo class=form-control id=inputRepo required></div></div><div class=form-group ng-class=\\\"{ 'has-error' : userForm.tag.$invalid && !userForm.tag.$pristine }\\\"><label for=inputTag class=\\\"col-sm-2 control-label\\\">Branch:</label><div class=col-sm-4><input name=Branch ng-model=selectedTag class=form-control id=inputTag required></div></div><div class=row><a ui-sref=envs({env:env.id})><button class=\\\"btn btn-primary\\\">Cancel</button></a> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=userForm.$invalid>Submit</button></div></form>\"\n  );\n\n\n  $templateCache.put('views/env/buttonband.html',\n    \"<div class=\\\"col-md-12 page-button-band\\\" ng-controller=envFunctionController><button type=button class=\\\"btn btn-default\\\" ng-click=decommission(state.env)>Decomission</button> <button type=button class=\\\"btn btn-default\\\" ng-click=clone(state.env)>Clone</button> <button ui-sref=compileReport({env:state.env}) class=\\\"btn btn-default\\\">Compile Reports</button> <button ng-hide=cstate class=\\\"btn btn-default\\\" ng-click=updateCompile(state.env)>Update & Recompile</button> <button ng-hide=cstate class=\\\"btn btn-default\\\" ng-click=compile(state.env)>Recompile</button> <button ng-hide=!cstate class=\\\"btn btn-default\\\">Compiling <i class=\\\"fa fa-cog fa-spin\\\"></i></button> <button type=button class=\\\"btn btn-default\\\" ui-sref=editEnv({env:state.env})>Edit</button></div>\"\n  );\n\n\n  $templateCache.put('views/env/envBody.html',\n    \"<div class=row><im-breadcrumb></im-breadcrumb></div><div class=row><div class=\\\"col-md-12 detail\\\"><p><strong>Repo:</strong> {{env.repo_url}}</p><p><strong>Branch:</strong> {{env.repo_branch}}</p></div><ng-include src=\\\"'views/env/buttonband.html'\\\"></ng-include><div class=col-md-12><table class=\\\"table table-lined\\\" ng-table=tableParams><tr ng-repeat=\\\"resource in $data track by resource.version\\\" ng-init=\\\"extra = {}\\\"><td data-title=\\\"'Date'\\\" sortable>{{resource.date|date:'dd/MM/yyyy HH:mm'}}</td><td data-title=\\\"'Version'\\\" sortable><a ui-sref=resources({env:resource.environment,version:resource.version})>{{resource.version}}</a></td><td data-title=\\\"'Deploy State'\\\" sortable>{{resource.state}}</td><td data-title=\\\"'Deploy Progress'\\\"><deploy-progress data=resource></deploy-progress></td><td align=right><button class=\\\"btn btn-link btn-xs\\\" ng-click=startDryRun(resource) title=\\\"Perform dry run\\\"><span class=\\\"glyphicon glyphicon-scale\\\" aria-hidden=true></span></button> <button class=\\\"btn btn-link btn-xs\\\" ui-sref=report({env:state.env,version:resource.version}) title=\\\"Dry run report\\\"><span class=\\\"glyphicon glyphicon-list-alt\\\"></span></button> <button class=\\\"btn btn-link btn-xs\\\" ng-click=deploy(resource) ng-disabled=\\\"resource.released \\\" title=\\\"Release version\\\"><span class=\\\"glyphicon glyphicon-play\\\" aria-hidden=true></span></button> <button class=\\\"btn btn-link btn-xs\\\" ui-sref=deployReport({env:state.env,version:resource.version}) title=\\\"Deploy report\\\"><span class=\\\"glyphicon glyphicon-tasks\\\"></span></button> <button class=\\\"btn btn-link btn-xs\\\" ng-click=deleteVersion(resource) title=\\\"Remove version\\\"><span class=\\\"glyphicon glyphicon-trash\\\" aria-hidden=true></span></button></td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/env/envSide.html',\n    \"<div class=row><div class=\\\"col-md-2 sidebar\\\"><ul class=\\\"nav nav-pills nav-stacked\\\" ng-if=state.env><li ui-sref-active=active><a ui-sref=portal({env:state.env})>Portal</a></li><li ui-sref-active=active ng-class=\\\"{'active':state.version}\\\"><a ui-sref=envs({env:state.env})>Versions</a></li><li ui-sref-active=active><a ui-sref=resourceCentric({env:state.env})>Resources</a></li><li ui-sref-active=active><a ui-sref=params({env:state.env})>Parameters</a></li><li ui-sref-active=active><a ui-sref=forms({env:state.env})>Forms</a></li><li ui-sref-active=active><a ui-sref=agents({env:state.env})>Agents</a></li><li ui-sref-active=active><a ui-sref=snapshots({env:state.env})>Snapshots</a></li><li ui-sref-active=active><a ui-sref=restores({env:state.env})>Restore</a></li></ul><div class=row style=\\\"position:absolute; bottom:55px\\\" ng-controller=configCtrl><div class=col-xs-3><button type=button class=\\\"btn btn-default\\\" ng-click=openFeedback(null) data-toggle=tooltip data-placement=top title=\\\"Give feedback\\\"><span class=\\\"glyphicon glyphicon-thumbs-up\\\"></span> / <span class=\\\"glyphicon glyphicon-thumbs-down\\\"></span></button></div><div class=col-xs-9><h5 class=text-right>{{config.backend}}</h5></div></div></div></div>\"\n  );\n\n\n  $templateCache.put('views/feedback/feedback.html',\n    \"<div class=modal-header><h3>Please provide your feedback</h3></div><form name=form.userForm ng-submit=submitFeedback(feedback) novalidate><div class=modal-body><div class=form-group><label>Name</label><input name=name class=form-control ng-model=feedback.name required><p ng-show=\\\"form.userForm.name.$invalid && !form.userForm.name.$pristine\\\" class=help-block>You name is required.</p></div><div class=form-group><label>User name</label><input name=username class=form-control ng-model=feedback.username ng-minlength=3 required><p ng-show=form.userForm.username.$error.minlength class=help-block>Username is too short.</p><p ng-show=form.userForm.username.$error.maxlength class=help-block>Username is too long.</p></div><div class=form-group><label>Email</label><input type=email name=email class=form-control ng-model=feedback.email required><p ng-show=\\\"form.userForm.email.$invalid && !form.userForm.email.$pristine\\\" class=help-block>Enter a valid email.</p></div><div class=form-group><label for=InputMessage>Message</label><div class=\\\"input-group col-md-12\\\" ng-model=feedback.message><textarea name=InputMessage id=InputMessage class=form-control rows=5 required></textarea></div></div></div><div class=modal-footer><button class=\\\"btn btn-primary\\\" ng-click=cancel()>Cancel</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=form.userForm.$invalid>Send</button></div></form>\"\n  );\n\n\n  $templateCache.put('views/feedback/scrap.html',\n    \"<div class=col-md-12><form name=form novalidate><h2 ng-if=selectedForm.options.title>{{selectedForm.options.title}}</h2><h2 ng-if=!selectedForm.options.title>{{selectedForm.form_type}}</h2><p>{{selectedForm.options.help}}</p><div class=form-group ng-repeat=\\\"(name,type) in selectedForm.fields\\\"><label>{{name}}</label><select class=form-control ng-if=\\\"selectedForm.field_options[name]['widget']=='options'\\\" ng-model=record[name] required><option ng-repeat=\\\"item in selectedForm.field_options[name]['options'].split(',') track by item\\\">{{item}}</option></select><input ng-if=\\\"selectedForm.field_options[name]['widget']!='options'\\\" type={{getFormType(type)}} name={{name}} ng-model=record[name] class=form-control required><p ng-show=\\\"form[name].$invalid && !form[name].$pristine\\\" class=help-block>This field is required.</p></div><button type=submit class=\\\"btn btn-primary\\\" ng-disabled=form.$invalid>Send</button></form></div><div class=col-md-12><h1>records</h1><table class=\\\"table table-lined\\\"><tr ng-repeat=\\\"rec in records\\\"><td>{{rec.changed}}</td><td><a ng-click=selectRecord(rec)>{{rec.id}}</a></td></tr></table></div><div class=col-md-12>{{selectedRecord}}</div>{{allrecords}}\"\n  );\n\n\n  $templateCache.put('views/fileDetail/fileDetail.html',\n    \"<div class=\\\"modal-header dialog-header-confirm\\\"><h4 class=modal-title><span class={{icon}}></span> {{header}}</h4></div><div class=modal-body><div hljs source=content></div></div><div class=modal-footer><button type=button class=\\\"btn btn-default\\\" ng-click=close()>Close</button></div>\"\n  );\n\n\n  $templateCache.put('views/formsView/formDialog.html',\n    \"<div class=modal-header><h3 ng-if=form.options.title>{{form.options.title}}</h3><h3 ng-if=!form.options.title>{{form.form_type}}</h3></div><form name=form.userForm ng-submit=submit() novalidate><div class=modal-body><p>{{form.options.help}}</p><div ng-repeat=\\\"type in fieldList track by type.key\\\" ng-switch=type.options.widget><div ng-switch-default class=form-group><label style=\\\"text-transform: capitalize\\\">{{type.key | replace:'_':' '}}</label><input name={{type.key}} ng-model=record.fields[type.key] class=form-control required><p class=help-block>{{type.options.help}}</p></div><div ng-switch-when=options class=form-group><label style=\\\"text-transform: capitalize\\\">{{type.key | replace:'_':' '}}</label><select class=form-control name={{type.key}} ng-model=record.fields[type.key] class=form-control required><option ng-repeat=\\\"item in type.options.options track by item\\\">{{item}}</option></select><p class=help-block>{{type.options.help}}</p></div><div ng-switch-when=checkbox class=checkbox><label style=\\\"text-transform: capitalize\\\"><input type=checkbox name={{type.key}} ng-model=record.fields[type.key] ng-true-value=true ng-false-value=\\\"false\\\"> {{type.key | replace:'_':' '}}</label><p class=help-block>{{type.options.help}}</p></div><div ng-switch-when=slider class=form-group><label style=\\\"text-transform: capitalize\\\">{{type.key | replace:'_':' '}}</label><input name={{type.key}} ng-model=record.fields[type.key] class=form-control class=form-control slider options=type.options.options required><p class=help-block>{{type.options.help}}</p></div></div></div><div class=modal-footer><button class=\\\"btn btn-primary\\\" ng-click=close()>Cancel</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=form.userForm.$invalid>Save</button></div></form>\"\n  );\n\n\n  $templateCache.put('views/formsView/formsViewBody.html',\n    \"<div class=row><im-breadcrumb></im-breadcrumb></div><div class=row><div class=col-md-12 ng-repeat=\\\"form in forms track by form.id\\\"><record-editor env=state.env type=form.type highlight=\\\"unknowns.indexOf(form.type)>=0\\\"></div></div>\"\n  );\n\n\n  $templateCache.put('views/formsView/recordEditor.html',\n    \"<div class=row><div class=\\\"col-md-12 page-header\\\"><a id={{selectedForm.form_type}}></a><h2 ng-if=selectedForm.options.title>{{selectedForm.options.title}}</h2><h2 ng-if=!selectedForm.options.title>{{selectedForm.form_type}}</h2><p class=bg-warning ng-if=highlight>This form must be filled in to compile the model</p><p>{{selectedForm.options.help}}</p></div><div class=\\\"col-md-12 page-button-band\\\"><button class=\\\"btn btn-default\\\" ng-if=!selectedForm.options.record_count ng-click=addNew(selectedForm)>{{allRecords.length}} Add</button> <button class=\\\"btn btn-default\\\" ng-show=\\\"allRecords.length<selectedForm.options.record_count\\\" ng-click=addNew(selectedForm)>{{allRecords.length}}/{{selectedForm.options.record_count}} Add</button></div><div class=col-md-12><table ng-table-dynamic=\\\"tableParams with cols\\\" class=\\\"table table-lined\\\" show-filter=\\\"!selectedForm.options.record_count || selectedForm.options.record_count!=1\\\"><tr ng-repeat=\\\"record in $data track by record.record_id\\\"><td ng-repeat=\\\"col in $columns track by col.field\\\" ng-if=col.field>{{record.fields[col.field]}}</td><td ng-if=true><button class=\\\"btn btn-link btn-xs\\\" ng-click=edit(selectedForm,record) title=Edit><span class=\\\"glyphicon glyphicon-edit\\\"></button> <button class=\\\"btn btn-link btn-xs\\\" ng-click=delete(record) title=Delete><span class=\\\"glyphicon glyphicon-trash\\\"></button></td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/graph/graph.html',\n    \"<div class=row><ol class=breadcrumb><li><a ui-sref=projects>Home</a></li><li>Environment:<a ui-sref=envs({env:state.env})>{{env.name}}</a></li><li class=active>Version: {{state.version}}</li></ol><ng-include src=\\\"'views/resource/buttonBar.html'\\\"></ng-include></div><div class=row style=overflow:hidden><div id=chart style=\\\"overflow:hidden;cursor: pointer\\\"></div></div>\"\n  );\n\n\n  $templateCache.put('views/log/logBody.html',\n    \"<div class=row><im-breadcrumb name=\\\"'Resource'\\\" id=state.id></im-breadcrumb><div class=\\\"col-md-5 detail\\\"><p><strong>Repo:</strong> {{env.repo_url}}</p><p><strong>Branch:</strong> {{env.repo_branch}}</p><p><strong>ID:</strong> {{env.id}}</p></div><div class=\\\"col-md-5 detail\\\"><p><strong>Resource</strong> {{state.id}}</p></div><div class=col-md-12><table class=\\\"table table-lined\\\" ng-table=tableParams show-filter=true><tr ng-repeat=\\\"log in $data\\\" ng-class=\\\"{'warning':param.expired}\\\"><td data-title=\\\"'Action'\\\" sortable filter=\\\"{ 'action':'text'}\\\">{{log.action}}</td><td data-title=\\\"'Level'\\\" sortable filter=\\\"{ 'level':'text'}\\\">{{log.level}}</td><td data-title=\\\"'Time'\\\" sortable filter=\\\"{ 'timestamp':'text'}\\\">{{log.timestamp|date:'dd/MM/yyyy HH:mm'}}</td><td data-title=\\\"'Msg'\\\" sortable filter=\\\"{ 'message':'text'}\\\">{{log.message}}</td><td data-title=\\\"'Data'\\\" sortable filter=\\\"{ 'data':'text'}\\\">{{log.data | json}}</td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/parameters/parametersBody.html',\n    \"<div class=row><im-breadcrumb></im-breadcrumb></div><div class=row><div class=\\\"col-md-5 detail\\\"><p><strong>Repo:</strong> {{env.repo_url}}</p><p><strong>Branch:</strong> {{env.repo_branch}}</p></div><div class=\\\"col-md-5 detail\\\"><p><strong>Expire (s):</strong> {{expire}}</p><p><strong>Server Time:</strong> {{servertime|date:'dd/MM/yyyy HH:mm'}}</p><p><strong>Drift (ms):</strong> {{drift}}</p></div><div class=col-md-12><table class=\\\"table table-lined\\\" ng-table=tableParams show-filter=true><tr ng-repeat=\\\"param in $data\\\" ng-class=\\\"{'warning':param.expired}\\\"><td data-title=\\\"'Name'\\\" sortable filter=\\\"{ 'name':'text'}\\\">{{param.name}}</td><td data-title=\\\"'Resource'\\\" sortable filter=\\\"{ 'resource_id':'text'}\\\">{{param[\\\"resource_id\\\"]}}</td><td data-title=\\\"'Updated'\\\" sortable filter=\\\"{ 'updated':'text'}\\\">{{param.updated|date:'dd/MM/yyyy HH:mm'}}</td><td data-title=\\\"'Source'\\\" sortable filter=\\\"{ 'source':'select'}\\\" filter-data=names()>{{param.source}}</td><td data-title=\\\"'Value'\\\" sortable filter=\\\"{ 'value':'text'}\\\">{{param.value}}</td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/portal/portalBody.html',\n    \"<div class=row><im-breadcrumb name=\\\"'Portal'\\\"></im-breadcrumb></div><div class=row><div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12 detail\\\"><p><strong>Repo:</strong> {{env.repo_url}}</p><p><strong>Branch:</strong> {{env.repo_branch}}</p></div><div class=\\\"col-lg-12 col-md-12 col-sm-12 col-xs-12\\\"><ng-include src=\\\"'views/env/buttonband.html'\\\"></ng-include></div></div><div class=row ng-show=\\\"unknowns.length>0\\\"><div class=col-md-12><h2>Required Input</h2><p class=detail>To complete the deployment, user input is required. Below is a list of forms that require input.</p><ul class=\\\"list-unstyled detail\\\"><li ng-repeat=\\\"unknown in unknowns track by unknown.metadata.form \\\"><a ui-sref=\\\"forms({env:state.env,form:unknown.metadata.form,'#':unknown.metadata.form})\\\">{{unknown.metadata.form}}</a></li></ul></div></div><div class=row ng-show=\\\"report.length>0\\\"><div class=col-md-12><h2>Application Overview</h2></div><div class=col-md-12><table class=\\\"table table-nonfluid\\\"><tr ng-repeat=\\\"line in report  | orderBy : 'name' \\\"><td><strong>{{line.name}}</strong></td><td ng-repeat-end ng-switch=\\\"line.value.indexof('http')<0\\\"><span ng-switch-default>{{line.value}}</span> <a target=_new href={{line.value}} ng-switch-when=false>{{line.value}}</a></td></tr></table></div></div><div class=row><div class=col-md-12><h2>Deployment Overview</h2></div><div class=col-md-5 ng-show=lastVersion><h3>Lastest Deployed Version</h3><p><strong>Version <a ui-sref=resources({env:state.env,version:lastVersion.version})>{{lastVersion.version}}</a> is currently deployed</strong> <button class=\\\"btn btn-link btn-xs\\\" ng-disabled=true title=\\\"Perform dry run\\\"><span class=\\\"glyphicon glyphicon-scale\\\" aria-hidden=true></span></button> <button class=\\\"btn btn-link btn-xs\\\" ui-sref=report({env:state.env,version:lastVersion.version}) title=\\\"Dry run report\\\"><span class=\\\"glyphicon glyphicon-list-alt\\\"></span></button> <button class=\\\"btn btn-link btn-xs\\\" ng-disabled=true title=\\\"Release version\\\"><span class=\\\"glyphicon glyphicon-play\\\" aria-hidden=true></span></button> <button class=\\\"btn btn-link btn-xs\\\" ui-sref=deployReport({env:state.env,version:lastVersion.version}) title=\\\"Deploy report\\\"><span class=\\\"glyphicon glyphicon-tasks\\\"></span></button></p><deploy-progress data=lastVersion></deploy-progress><p></p><p><strong>Built on:</strong> {{lastVersion.date |date:'dd/MM/yyyy HH:mm'}}</p></div><div class=col-md-5 ng-show=newVersion><h3>Newest Version</h3><p><strong>Version <a ui-sref=resources({env:state.env,version:newVersion.version})>{{newVersion.version}}</a> is ready to deploy</strong> <button class=\\\"btn btn-link btn-xs\\\" ng-click=startDryRun(newVersion) title=\\\"Perform dry run\\\"><span class=\\\"glyphicon glyphicon-scale\\\" aria-hidden=true></span></button> <button class=\\\"btn btn-link btn-xs\\\" ui-sref=report({env:state.env,version:newVersion.version}) title=\\\"Dry run report\\\"><span class=\\\"glyphicon glyphicon-list-alt\\\"></span></button> <button class=\\\"btn btn-link btn-xs\\\" ng-click=deploy(newVersion) ng-disabled=\\\"newVersion.released \\\" title=\\\"Release version\\\"><span class=\\\"glyphicon glyphicon-play\\\" aria-hidden=true></span></button> <button class=\\\"btn btn-link btn-xs\\\" ui-sref=deployReport({env:state.env,version:newVersion.version}) title=\\\"Deploy report\\\"><span class=\\\"glyphicon glyphicon-tasks\\\"></span></button></p><deploy-progress data=newVersion></deploy-progress><p class=detail><strong>Built on:</strong> {{newVersion.date |date:'dd/MM/yyyy HH:mm'}}</p></div></div>\"\n  );\n\n\n  $templateCache.put('views/project/projectBody.html',\n    \"<div class=row><div class=col-md-12><div class=page-header><h1>Environments</h1></div></div><div class=\\\"col-md-12 page-button-band\\\"><a ui-sref=addEnv({project:state.project})><button type=button class=\\\"btn btn-default\\\">Add new environment</button></a></div></div><div class=row><div class=col-md-12><table class=\\\"table table-lined\\\" ng-table=tableParams show-filter=false><tr ng-repeat=\\\"env in $data\\\"><td data-title=\\\"'Name'\\\" sortable filter=\\\"{ 'name':'text'}\\\"><a ui-sref=portal({env:env.id})>{{env.name}}</a></td><td data-title=\\\"'Repo'\\\" sortable filter=\\\"{ 'repo_url':'text'}\\\">{{env.repo_url}}</td><td data-title=\\\"'Branch'\\\" sortable filter=\\\"{ 'repo_branch':'text'}\\\">{{env.repo_branch}}</td><td><button class=\\\"btn btn-default btn-xs\\\" ng-click=deleteEnv(env)><span class=\\\"glyphicon glyphicon-trash\\\" aria-hidden=true></span></button> <button class=\\\"btn btn-default btn-xs\\\" ui-sref=editEnv({env:env.id})><span class=\\\"glyphicon glyphicon-pencil\\\" aria-hidden=true></span></button></td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/projects/projectBody.html',\n    \"<div class=row><div class=col-md-12><div class=page-header><h1>Projects</h1></div></div><div class=\\\"col-md-12 page-button-band\\\"><a ui-sref=addProject class=pull-right><button type=button class=\\\"btn btn-primary\\\">Add new project</button></a></div></div><div class=row><div class=col-md-12><table class=\\\"table table-lined\\\" ng-table=tableParams show-filter=false><tr ng-repeat=\\\"project in $data\\\"><td data-title=\\\"'Name'\\\" sortable filter=\\\"{ 'name':'text'}\\\"><a ui-sref=project({project:project.id})>{{project.name}}</a></td><td data-title=\\\"'Id'\\\" sortable filter=\\\"{ 'id':'text'}\\\">{{project.id}}</td><td><button class=\\\"btn btn-default btn-xs\\\" ng-click=deleteProject(project)><span class=\\\"glyphicon glyphicon-trash\\\" aria-hidden=true></span></button></td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/report/reportBody.html',\n    \"<div class=row><im-breadcrumb name=\\\"'Dryrun Report'\\\"></im-breadcrumb><ng-include src=\\\"'views/resource/buttonBar.html'\\\"></ng-include></div><div class=row><div class=\\\"col-md-5 page-button-band\\\" ng-if=\\\"dryruns.length != 0\\\"><select class=form-control ng-model=dryrun ng-options=\\\"dryrun.date for dryrun in dryruns track by dryrun.id\\\"></select></div></div><div class=row ng-if=\\\"dryruns.length == 0\\\"><h2>No dry runs for this versions</h2></div><div class=row><div class=\\\"col-md-5 detail\\\" ng-if=dryrun.date><p><strong>Started:</strong> {{dryrun.date|date:'dd/MM/yyyy HH:mm'}}</p><p><strong>Progress:</strong> {{dryrun.total-dryrun.todo}}/{{dryrun.total}}</p></div><div class=col-md-12 ng-hide=!dryrun.date><div class=col-md-12 style=min-height:150px ng-hide=\\\"tableParams.data.length != 0 || !tableParams.settings().$loading\\\"><span us-spinner=\\\"{radius:30, width:8, length: 16}\\\" style=\\\"text-align: center; padding-top: 25px\\\"></span></div><table ng-table=tableParams ng-hide=\\\"tableParams.data.length == 0 && tableParams.settings().$loading\\\" class=\\\"table table-lined\\\" show-filter=true><tr ng-repeat=\\\"res in $data\\\"><td data-title=\\\"'type'\\\" sortable filter=\\\"{ 'id_fields.entity_type':'text'}\\\">{{res.id_fields.entity_type}}</td><td data-title=\\\"'agent'\\\" sortable filter=\\\"{ 'id_fields.agent_name':'text'}\\\">{{res.id_fields.agent_name}}</td><td data-title=\\\"'value'\\\" sortable filter=\\\"{ 'id_fields.attribute_value':'text'}\\\">{{res.id_fields.attribute_value}}</td><td data-title=\\\"'Data'\\\" sortable filter=\\\"{ 'changessize':'partials/emptyFilter.html'}\\\"><div ng-repeat=\\\"(prop,ft) in res.changes\\\"><p ng-if=\\\"prop!='hash'\\\"><strong>{{prop}}:</strong> {{ft[0]}} <span class=\\\"glyphicon glyphicon-arrow-right\\\"></span> {{ft[1]}}</p><button ng-if=\\\"prop=='hash'\\\" class=\\\"btn btn-xs btn-default\\\" ng-click=open(ft,res.id)>Diff</button></div></td><td><button class=\\\"btn btn-link btn-xs\\\" ng-click=details(res) title=\\\"View details for this resource\\\"><span class=\\\"glyphicon glyphicon-zoom-in\\\"></span></button></td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/resource/buttonBar.html',\n    \"<div class=\\\"col-md-12 page-button-band\\\" ng-controller=resourceButtonController><button ui-sref-active=hidden class=\\\"btn btn-default\\\" ui-sref=report({env:state.env,version:state.version}) title=\\\"Dry run report\\\"><span class=\\\"glyphicon glyphicon-list-alt\\\"></span> Dry run report</button> <button class=\\\"btn btn-default\\\" ng-click=dryrun() title=\\\"Perform dry run\\\"><span class=\\\"glyphicon glyphicon-scale\\\" aria-hidden=true></span> Perform dry run</button> <button ui-sref-active=hidden class=\\\"btn btn-default\\\" ui-sref=deployReport({env:state.env,version:state.version}) title=\\\"Deploy report\\\"><span class=\\\"glyphicon glyphicon-tasks\\\"></span> Deploy report</button> <button class=\\\"btn btn-default\\\" ng-click=deploy() ng-disabled=\\\"resource.released \\\" title=\\\"Release version\\\"><span class=\\\"glyphicon glyphicon-play\\\" aria-hidden=true></span> Deploy</button> <a ui-sref-active=hidden ui-sref=resources({env:state.env,version:state.version})><button type=button class=\\\"btn btn-default\\\"><span class=\\\"fa fa-table\\\"></span> Table view</button></a> <a ui-sref-active=hidden ui-sref=graph({env:state.env,version:state.version})><button type=button class=\\\"btn btn-default\\\"><span class=\\\"fa fa-codepen\\\"></span> Graph view</button></a></div>\"\n  );\n\n\n  $templateCache.put('views/resource/resourceBody.html',\n    \"<div class=row><im-breadcrumb></im-breadcrumb></div><deploy-progress data=status name=\\\"'Deploy'\\\" action=setsort emptyname=\\\"'Deploy'\\\" emptyaction=deploy></deploy-progress><div class=row><ng-include src=\\\"'views/resource/buttonBar.html'\\\"></ng-include><div class=col-md-12><table class=\\\"table table-lined\\\" ng-table=tableParams show-filter=true><tr ng-repeat=\\\"res in $data track by res.id\\\" ng-class=\\\"{'bg-info':res.id==toHighlight}\\\"><td data-title=\\\"'Type'\\\" sortable filter=\\\"{ 'id_fields.entity_type':'text'}\\\"><a ui-sref=\\\"logs({env:state.env,id:res.id, version:state.version})\\\">{{res.id_fields.entity_type}}</a></td><td data-title=\\\"'Agent'\\\" sortable filter=\\\"{ 'id_fields.agent_name':'text'}\\\">{{res.id_fields.agent_name}}</td><td data-title=\\\"'Value'\\\" sortable filter=\\\"{ 'id_fields.attribute_value':'text'}\\\" class=col-md-2>{{res.id_fields.attribute_value}}</td><td data-title=\\\"'Deps'\\\" sortable class=col-md-2 style=\\\"max-width: 90px; word-wrap: break-word\\\"><div ng-repeat=\\\"d in res.fields.requires track by $index\\\"><p ng-click=highlight(d)>{{d }}</p></div></td><td data-title=\\\"'State'\\\" sortable filter=\\\"{ 'status':'select'}\\\" filter-data=states() class=col-xs-1>{{res.status}}</td><td><button class=\\\"btn btn-link btn-xs\\\" ng-click=details(res)><span class=\\\"glyphicon glyphicon-zoom-in\\\"></span></button></td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/resource/resourceSide.html',\n    \"<div class=row><div class=\\\"col-md-2 sidebar\\\"><ul class=\\\"nav nav-pills nav-stacked\\\"><li ui-sref-active=active><a ui-sref=resources({env:state.env,version:state.version})>Overview</a></li><li ui-sref-active=active><a ui-sref=graph({env:state.env,version:state.version})>Graph</a></li><li ui-sref-active=active><a ui-sref=report({env:state.env,version:state.version})>Report</a></li></ul></div><div class=row style=\\\"position:absolute; bottom:50px\\\" ng-controller=configCtrl><div class=col-xs-3><button type=button class=\\\"btn btn-default\\\" ng-click=openFeedback(null) data-toggle=tooltip data-placement=top title=\\\"Give feedback\\\"><span class=\\\"glyphicon glyphicon-thumbs-up\\\"></span> / <span class=\\\"glyphicon glyphicon-thumbs-down\\\"></span></button></div><div class=col-xs-9><h5>{{config.backend}}</h5></div></div></div>\"\n  );\n\n\n  $templateCache.put('views/resourceDetail/resourceDetail.html',\n    \"<div class=\\\"modal-header dialog-header-confirm\\\"><button type=button class=close ng-click=close()>&times;</button><h4 class=modal-title><span class={{icon}}></span> {{header}}</h4></div><div class=modal-body><div><strong>ID:</strong> {{data.id}}</div><div><strong>State:</strong> {{data.state}}</div><div ng-repeat=\\\"detail in keys\\\" class=abrev ng-init=\\\"hide = (detail.indexOf('password')>=0)\\\"><strong>{{detail}}:</strong> <span ng-hide=hide>{{data.fields[detail]}}</span> <button ng-hide=!hide ng-click=\\\"hide=false\\\" class=\\\"btn btn-xs btn-link\\\">***</button></div></div><div class=modal-footer><a ui-sref=logs({env:env,id:data.id})><button type=button class=\\\"btn btn-default\\\" ng-click=close()>View Log</button></a> <button type=button class=\\\"btn btn-default\\\" ng-if=data.fields.hash ng-click=open()>Open File</button> <button type=button class=\\\"btn btn-default\\\" ng-click=close()>Close</button></div>\"\n  );\n\n\n  $templateCache.put('views/resourcecentric/resourceCentricBody.html',\n    \"<div class=row><im-breadcrumb></im-breadcrumb></div><div class=row><div class=col-md-12><h1>Resources Overview</h1></div></div><div class=row><div class=col-md-12><table class=\\\"table table-lined\\\" ng-table=tableParams show-filter=true><tr ng-repeat=\\\"res in $data track by res.id\\\"><td style=width:3em sortable><span ng-if=\\\"res.deployed_version==res.latest_version\\\" class=\\\"glyphicon glyphicon-ok\\\" title=\\\"Up to date\\\"></span></td><td data-title=\\\"'Type'\\\" sortable filter=\\\"{ 'id_fields.type':'text'}\\\">{{res.id_fields.type}}</td><td data-title=\\\"'Agent'\\\" sortable filter=\\\"{ 'id_fields.agent':'text'}\\\">{{res.id_fields.agent}}</td><td data-title=\\\"'Value'\\\" sortable filter=\\\"{ 'id_fields.value':'text'}\\\" class=col-md-2>{{res.id_fields.value}}</td><td data-title=\\\"'Deployed version'\\\" sortable filter=\\\"{ 'deployed_version':'text'}\\\"><a ui-sref=resources({env:state.env,version:res.deployed_version})>{{res.deployed_version | nozero}}</a></td><td data-title=\\\"'Latest version'\\\" sortable filter=\\\"{ 'latest_version':'text'}\\\"><a ui-sref=resources({env:state.env,version:res.latest_version})>{{res.latest_version | nozero}}</a></td><td data-title=\\\"'Last Deploy'\\\" sortable>{{res.last_deploy |date:'dd/MM/yyyy HH:mm'}}</td><td><button class=\\\"btn btn-link btn-xs\\\" ng-click=details(res) style=\\\"color: #333333\\\" title=\\\"View details for this resource\\\"><span class=\\\"glyphicon glyphicon-zoom-in\\\"></span></button></td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/restores/restoreBody.html',\n    \"<div class=row><div class=col-md-12><div class=page-header><h1>Restores</h1></div></div><div class=\\\"col-md-12 page-button-band\\\"><button type=button class=\\\"btn btn-default\\\" ng-click=startRestore()>Start Restore</button></div></div><div class=row><div class=col-md-12><table class=\\\"table table-lined\\\" ng-table=tableParams show-filter=false><tr ng-repeat=\\\"sp in $data\\\"><td data-title=\\\"'Name'\\\" sortable filter=\\\"{ 'sp.snapshot_id':'text'}\\\"><a ui-sref=snapshot({env:state.env,id:sp.snapshot})>{{sp.snapshot_id}}</a></td><td data-title=\\\"'Started'\\\" sortable filter=\\\"{ 'started':'text'}\\\">{{sp.started |date:'dd/MM/yyyy HH:mm'}}</td><td data-title=\\\"'Duration:s'\\\"><span ng-hide=!sp.finished>{{ (sp.finished - sp.started)/1000 | number : 1}}</span></td><td data-title=\\\"'Size'\\\" sortable>{{sp.resources_todo}}</td><td><button class=\\\"btn btn-default btn-xs\\\" ng-click=deleteRestore(sp.id) title=Delete><span class=\\\"glyphicon glyphicon-trash\\\" aria-hidden=true></span></button></td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/restores/restoreForm.html',\n    \"<div class=\\\"modal-header dialog-header-confirm\\\"><h4 class=modal-title>Start Restore</h4></div><form name=userForm ng-submit=done() novalidate><div class=modal-body><div class=form-group><label>Target Environment</label><select ng-model=env name=env ng-options=\\\"env.project_full.name +'.'+env.name for env in envs track by env.id\\\" required></select><p ng-show=\\\"userForm.name.$invalid && !userForm.name.$pristine\\\" class=help-block>Environment Required.</p></div><div class=form-group><label>Snapshot</label><select ng-model=snapshot name=snapshot ng-options=\\\"sn.name for sn in snapshots track by sn.id\\\" required></div></div><div class=modal-footer><button class=\\\"btn btn-primary\\\" ng-click=cancel()>Cancel</button> <button type=submit class=\\\"btn btn-primary\\\" ng-disabled=userForm.$invalid>Send</button></div></form>\"\n  );\n\n\n  $templateCache.put('views/snapshotDetail/snapshotDetailBody.html',\n    \"<div class=row><im-breadcrumb></im-breadcrumb></div><div class=row><div class=\\\"col-md-6 detail\\\"><p><strong>Started:</strong> {{sn.started |date:'dd/MM/yyyy HH:mm'}}</p><p><strong>Finished:</strong> {{sn.finished |date:'dd/MM/yyyy HH:mm'}}</p><p><strong>Size:</strong> {{sn.total_size}}</p><p><strong>Name:</strong> {{sn.name}}</p></div></div><div class=row><div class=col-md-12><table class=\\\"table table-lined\\\" ng-table=tableParams show-filter=false><tr ng-repeat=\\\"res in $data\\\"><td data-title=\\\"'Name'\\\" sortable filter=\\\"{ 'state_id':'text'}\\\">{{res.state_id }}</td><td data-title=\\\"'Started'\\\" sortable filter=\\\"{ 'started':'text'}\\\">{{res.started |date:'dd/MM/yyyy HH:mm'}}</td><td data-title=\\\"'Duration (s)'\\\">{{sp.finished - sp.started}}</td><td data-title=\\\"'Size (kb)'\\\" sortable filter=\\\"{ 'size':'text'}\\\">{{res.size/1024 | number : 1}}</td><td data-title=\\\"'Success'\\\" sortable filter=\\\"{ 'success':'text'}\\\">{{res.success}}</td><td data-title=\\\"'Error'\\\" sortable filter=\\\"{ 'error':'text'}\\\">{{res.error}}</td><td data-title=\\\"'Message'\\\" sortable filter=\\\"{ 'msg':'text'}\\\">{{res.msg}}</td><td><button class=\\\"btn btn-default btn-xs\\\" ng-click=download(res.content_hash)><span class=\\\"glyphicon glyphicon-download\\\" aria-hidden=true></span></button></td></tr></table></div></div>\"\n  );\n\n\n  $templateCache.put('views/snapshots/snapshotBody.html',\n    \"<div class=row><div class=col-md-12><div class=page-header><h1>Snapshots</h1></div></div><div class=\\\"col-md-12 page-button-band\\\"><button type=button class=\\\"btn btn-default\\\" ng-click=createSnapshot()>Create Snapshot</button></div></div><div class=row><div class=col-md-12><table class=\\\"table table-lined\\\" ng-table=tableParams show-filter=false><tr ng-repeat=\\\"sp in $data\\\"><td data-title=\\\"'Name'\\\" sortable filter=\\\"{ 'name':'text'}\\\"><a ui-sref=snapshot({env:state.env,id:sp.id})><span ng-if=sp.name>{{sp.name}}</span> <span ng-if=!sp.name>No Name</span></a></td><td data-title=\\\"'Started'\\\" sortable filter=\\\"{ 'started':'text'}\\\">{{sp.started |date:'dd/MM/yyyy HH:mm'}}</td><td data-title=\\\"'Duration:s'\\\"><span ng-hide=!sp.finished>{{ (sp.finished - sp.started)/1000 | number : 1}}</span></td><td data-title=\\\"'Size:kb'\\\" sortable filter=\\\"{ 'total_size':'text'}\\\">{{sp.total_size/1024 | number : 1}}</td><td data-title=\\\"'Model'\\\" sortable filter=\\\"{ 'model':'text'}\\\"><a ui-sref=resources({env:state.env,version:sp.model})>{{sp.model}}</a></td><td><button class=\\\"btn btn-default btn-xs\\\" ng-click=deleteSnapshot(sp.id) title=Delete><span class=\\\"glyphicon glyphicon-trash\\\" aria-hidden=true></span></button> <button class=\\\"btn btn-default btn-xs\\\" ng-click=restoreSnapshot(state.env,sp.id) title=\\\"Restore in place\\\"><span class=\\\"glyphicon glyphicon-new-window\\\" aria-hidden=true></span></button></td></tr></table></div></div>\"\n  );\n\n}]);\n","'use strict';\n\nvar resv = angular.module('ImperaApp.addEnv', ['ui.router','imperaApi','ngTable'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n $stateProvider\n    .state('addEnv', {\n      url: \"/addEnvironment?project\",\n      views:{\n        \"body\":{\n            templateUrl: \"views/addEnv/addEnv.html\",\n            controller:\"addEnvController\"\n        },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n      }\n      \n    })\n}]);\n\nresv.controller('addEnvController', ['$scope', 'imperaService', '$state','$stateParams','$rootScope', function($scope, imperaService, $state,$stateParams,$rootScope) {\n \n    $scope.name = null;\n\n    $scope.selectedTag = null;\n\n    $scope.ready = function(){\n        return $scope.selectedProject;\n    }\n    imperaService.getProjects().then(function(data) {\n        $scope.projects = data;\n        if($stateParams[\"project\"]){\n            \n            $scope.selectedProject = data.filter(function(d){return d.id == $stateParams[\"project\"]})[0]\n        }       \n    });\n\n    \n    $scope.addEnv = function(project,name,repo,tag){\n        //console.log(project,name,repo,tag)\n        imperaService.addEnvironment(project,name,repo,tag).then(function(d){$rootScope.$broadcast('refresh'); $state.go(\"envs\",{ env:d.id })})\n    }\n\n    \n    $scope.projects = null\n  \n}]);\n","'use strict';\n\n\n\nvar resv = angular.module('ImperaApp.resourceCentricView', ['ui.router', 'imperaApi', 'ngTable', 'dialogs.main', 'ImperaApp.resourceDetail','ImperaApp.fileDetail','impera.services.backhaul'])\n\nresv.config([\"$stateProvider\", function($stateProvider) {\n    $stateProvider\n        .state('resourceCentric', {\n            url: \"/environment/:env/resources\",\n            views: {\n                \"body\": {\n                    templateUrl: \"views/resourcecentric/resourceCentricBody.html\",\n                    controller: \"resourceCentricController\"\n                },\n                \"side\": {\n                    templateUrl: \"views/env/envSide.html\",\n                    controller: \"sideController\"\n\n                }\n            }\n\n        })\n}]);\n\n\n\nresv.controller('resourceCentricController', ['$scope','$rootScope', 'imperaService', \"$stateParams\", \"BackhaulTable\", \"dialogs\",\"$q\",\n    function($scope, $rootScope, imperaService, $stateParams, BackhaulTable, dialogs,$q) {\n        \n        $scope.state = $stateParams\n\n       $scope.startDryRun = function() {\n            imperaService.dryrun($stateParams.env,$stateParams.version).then(function(d){\n                $scope.dryrunid=d.id\n                $rootScope.$broadcast('refresh')\n            });     \n        }\n        \n        $scope.deploy = function() {\n            imperaService.deploy($stateParams.env,$stateParams.version,true).then(function(d){$rootScope.$broadcast('refresh')});\n          \n        }\n\n        $scope.tableParams = new BackhaulTable($scope,{\n            page: 1, // show first page\n            count: 50 // count per page\n           \n        }, function(params){\n                    return imperaService.getResourcesState($stateParams.env).then(function(info) {\n                    $scope.env = info\n                    $scope.versions = info.versions\n                    \n\n                    var data = info.resources\n                    $scope.counts = {}\n                    $scope.vcount = 0\n                    $scope.maxcount = data.length\n                    angular.forEach(data, function(item) {\n                        if(!$scope.counts[item.deployed_version]){\n                            $scope.counts[item.deployed_version]=1\n                            $scope.vcount++\n                        }else{\n                            $scope.counts[item.deployed_version]++\n                        }\n                    })\n                    \n                    \n                    return data;\n\n                })\n        });\n        $scope.resources = null\n\n\n        $scope.details = function(item) {\n            imperaService.getResource($stateParams.env,item.id+\",v=\"+item.latest_version).then(function(d){\n                dialogs.create('views/resourceDetail/resourceDetail.html', 'resourceDetailCtrl', {\n                    resource: d,\n                    env:$stateParams.env\n                }, {})\n\n            })\n\n        }\n\n        $scope.open = function(item) {\n            imperaService.getResource($stateParams.env,item.id+\",v=\"+item.latest_version).then(function(d){\n                dialogs.create('views/fileDetail/fileDetail.html', 'fileDetailCtrl', {\n                    resource: d,\n                    env:$stateParams.env\n                }, {})\n            })\n\n        }\n     \n\n        $scope.setFilter = function(field,value){\n            $scope.tableParams.filter()[field]=value\n        }\n   \n    }\n\n    \n]);\n"]}